{"version":3,"sources":["page/CaptureList.tsx","hook/useCapture.tsx","components/CaptureButton.tsx","components/CheckToolButton.tsx","components/CaptureListButton.tsx","components/RecordAndPrescriptionButton.tsx","hook/usePage.tsx","components/DiagnosticHistoryButton.tsx","components/ButtonGroup.tsx","page/RecordAndPrescription.tsx","core/helpers/segmentationHelper.ts","pipelines/canvas2d/canvas2dPipeline.ts","pipelines/helpers/webglHelper.ts","pipelines/webgl2/backgroundBlurStage.ts","pipelines/webgl2/resizingStage.ts","pipelines/webgl2/webgl2Pipeline.ts","pipelines/webgl2/softmaxStage.ts","pipelines/webgl2/loadSegmentationStage.ts","pipelines/webgl2/jointBilateralFilterStage.ts","pipelines/webgl2/backgroundImageStage.ts","core/hooks/useRenderingPipeline.ts","components/VirtualPhoto.tsx","core/helpers/backgroundHelper.ts","core/hooks/useBodyPix.ts","core/hooks/useTFLite.ts","page/CheckTool.tsx","page/DiagnosticHistory.tsx","page/Client.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CaptureList","Array","Function","photoList","setPhotoList","setIsModal","setSrc","photoRef","useRef","buttonRef","onDeleteHandler","e","i","array","filter","photo","photoIndex","photoRefArray","current","el","elIndex","buttonRefArray","console","log","useEffect","undefined","forEach","item","addEventListener","style","display","removeEventListener","color","width","padding","height","flexDirection","alignItems","overflowY","minHeight","length","map","ref","marginBottom","position","src","image","alt","onClick","bottom","right","background","borderRadius","useCapture","elObject","vedioRef","useState","isClick","setIsClick","useScreenshot","takeScreenshot","setImage","useCallback","now","Date","fileName","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","fetch","then","res","blob","file","File","type","name","clickCapture","tempRef","eltype","document","querySelector","elname","canvasRef","CaptureButton","id","fontSize","margin","CheckToolButton","onClickHandler","CaptureListButton","btnIdRef","RecordAndPrescriptionButton","usePage","setCurrentPage","pageName","catchPullimRef","getElementById","DiagnosticHistoryButton","ButtonGroup","Container","buttonGroupRef","zIndex","left","RecordAndPrescription","uploadedPhotoList","setUploadedPhotoList","videoList","setVideoList","memo","setMemo","readUploadedFileAsImage","inputFile","fileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","base64Data","result","readAsDataURL","handleUpload","event","files","target","all","from","fileContents","message","savePrescription","formData","FormData","entirePhotos","concat","alert","append","videoFile","axios","post","data","success","onChange","value","minWidth","multiple","className","videoFiles","videos","inputResolutions","getTFLiteModelFileName","model","inputResolution","Error","buildCanvas2dPipeline","sourcePlayback","backgroundConfig","segmentationConfig","canvas","bodyPix","tflite","addFrameEvent","ctx","getContext","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","createElement","postProcessingConfig","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","resizeSource","runBodyPixInference","runTFLiteInference","runPostProcessing","drawImage","htmlElement","imageData","getImageData","HEAPF32","segmentPerson","segmentation","putImageData","_runInference","person","shift","Math","max","backgroundExp","exp","personExp","globalCompositeOperation","smoothSegmentationMask","render","updatePostProcessingConfig","newPostProcessingConfig","cleanUp","glsl","String","raw","createPiplelineStageProgram","gl","vertexShader","fragmentShader","positionBuffer","texCoordBuffer","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","texCoordAttributeLocation","compileShader","shaderType","shaderSource","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createTexture","internalformat","minFilter","NEAREST","magFilter","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texStorage2D","x","y","format","dest","buf","createBuffer","PIXEL_PACK_BUFFER","bufferData","byteLength","STREAM_READ","readPixels","getBufferSubDataAsync","deleteBuffer","buffer","srcByteOffset","dstBuffer","dstOffset","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitAsync","deleteSync","WAIT_FAILED","getBufferSubData","requestAnimationFrame","test","clientWaitSync","TIMEOUT_EXPIRED","buildBackgroundBlurStage","personMaskTexture","blurPass","fragmentShaderSource","scale","outputWidth","outputHeight","texelWidth","texelHeight","FRAGMENT_SHADER","inputFrameLocation","getUniformLocation","personMaskLocation","texelSizeLocation","texture1","RGBA8","LINEAR","texture2","frameBuffer1","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","frameBuffer2","viewport","useProgram","uniform1i","activeTexture","TEXTURE1","uniform2f","drawArrays","TRIANGLE_STRIP","TEXTURE2","deleteFramebuffer","deleteTexture","deleteProgram","deleteShader","buildBlurPass","blendPass","vertexShaderSource","VERTEX_SHADER","blurredInputFrame","coverageLocation","updateCoverage","coverage","buildBlendPass","buildResizingStage","tfliteInputMemoryOffset","outputPixelCount","outputTexture","frameBuffer","outputPixels","Uint8Array","readPixelsAsync","RGBA","UNSIGNED_BYTE","tfliteIndex","outputIndex","buildWebGL2Pipeline","backgroundImage","frameWidth","frameHeight","preserveDrawingBuffer","vertexArray","createVertexArray","bindVertexArray","Float32Array","STATIC_DRAW","inputFrameTexture","segmentationTexture","resizingStage","loadSegmentationStage","tfliteOutputMemoryOffset","inputLocation","inputTexture","RG32F","texSubImage2D","RG","buildSoftmaxStage","R32F","RED","buildLoadSegmentationStage","jointBilateralFilterStage","segmentationMaskLocation","stepLocation","radiusLocation","offsetLocation","sigmaTexelLocation","sigmaColorLocation","updateSigmaSpace","sigmaSpace","step","sqrt","radius","offset","sigmaTexel","uniform1f","updateSigmaColor","sigmaColor","buildJointBilateralFilterStage","backgroundStage","outputRatio","backgroundScaleLocation","backgroundOffsetLocation","backgroundLocation","lightWrappingLocation","blendModeLocation","backgroundTexture","updateBackgroundImage","naturalWidth","naturalHeight","xOffset","yOffset","backgroundWidth","backgroundHeight","xScale","yScale","complete","updateLightWrapping","lightWrapping","updateBlendMode","blendMode","buildBackgroundImageStage","clearColor","clear","COLOR_BUFFER_BIT","TEXTURE0","texImage2D","jointBilateralFilter","backgroundImageStage","deleteVertexArray","useRenderingPipeline","pipeline","setPipeline","backgroundImageRef","fps","setFps","durations","setDurations","renderRequestId","shouldRender","previousTime","beginTime","eventCount","frameCount","frameDurations","newPipeline","beginFrame","endFrame","time","cancelAnimationFrame","VirtualPhoto","props","url","hidden","objectFit","backgroundImageUrls","imageName","process","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useTFLite","setTFLite","tfliteSIMD","setTFLiteSIMD","selectedTFLite","setSelectedTFLite","isSIMDSupported","setSIMDSupported","createTFLiteModule","createTFLiteSIMDModule","createdTFLiteSIMD","warn","loadTFLite","backend","newSelectedTFLite","modelFileName","modelResponse","arrayBuffer","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","_loadModel","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","loadTFLiteModel","SOCKET_URL","CheckTool","checkedPhotoList","isHost","setCheckedPhotoList","userName","meetingNumber","setSourcePlayback","socketData","setSocketData","myId","setMyId","callAccepted","setCallAccepted","isLoading","setLoading","userVideo","connection","websocket","io","path","transports","on","info","emit","JSON","stringify","room_id","peer","Peer","initiator","trickle","signalData","stream","srcObject","signal","visibility","playsInline","autoPlay","muted","onLoadedData","video","videoWidth","videoHeight","checkedPhoto","DiagnosticHistory","Client","setStream","caller","setCaller","receivingCall","setReceivingCall","callerSignal","setCallerSignal","myVideo","navigator","mediaDevices","getUserMedia","audio","to","ZoomMtg","setZoomJSLib","preLoadWasm","prepareWebSDK","i18n","load","reload","App","setUrl","setUserName","isEnter","setIsEnter","setIsHost","isModal","currentPage","location","href","split","sdkKey","slice","indexOf","passWord","justifyContent","checked","htmlFor","marginRight","preventDefault","root","setting","leaveUrl","showMeetingHeader","disableInvite","disableCallOut","disableRecord","disableJoinAudio","audioPanelAlwaysOpen","showPureSharingContent","isSupportAV","isSupportChat","isSupportQA","isSupportCC","isSupportPolling","isSupportBreakout","screenShare","videoDrag","videoHeader","isLockBottom","isSupportNonverbal","isShowJoiningErrorDialog","inviteUrlFormat","meetingInfo","disableVoIP","disableReport","disablePreview","disableCORP","onRetryCallback","enableHD","helper","join_data","signature","generateSDKSignature","sdkSecret","role","error","userEmail","tk","init","join","top","backgroundColor","overflow","border","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.5fdee651.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nexport default function CaptureList(\n  { photoList, setPhotoList, setIsModal, setSrc }: any = { Array, Function }\n) {\n  const photoRef = useRef([]) as any;\n  const buttonRef = useRef([]) as any;\n\n  const onDeleteHandler = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    i: number\n  ) => {\n    const array = photoList.filter(\n      (photo: string, photoIndex: number) => i !== photoIndex\n    );\n    const photoRefArray = photoRef.current.filter(\n      (el: HTMLElement, elIndex: number) => i !== elIndex\n    );\n    const buttonRefArray = buttonRef.current.filter(\n      (el: HTMLElement, elIndex: number) => i !== elIndex\n    );\n    console.log(\"삭제된 것\", i);\n    setPhotoList(array);\n    photoRef.current = photoRefArray;\n    buttonRef.current = buttonRefArray;\n  };\n  useEffect(() => {\n    if (photoRef!.current !== undefined && buttonRef.current !== undefined) {\n      photoList.forEach((item: string, i: number) => {\n        photoRef.current[i]?.addEventListener(\"mouseover\", () => {\n          buttonRef.current[i]!.style.display = \"block\";\n        });\n        photoRef.current[i]?.addEventListener(\"mouseleave\", () => {\n          buttonRef.current[i].style.display = \"none\";\n        });\n      });\n    }\n    return () => {\n      photoList.forEach((item: string, i: number) => {\n        if (\n          photoRef!.current !== undefined &&\n          buttonRef.current !== undefined\n        ) {\n          photoRef.current[i]?.removeEventListener(\"mouseover\", () => {\n            buttonRef.current[i]!.style.display = \"block\";\n          });\n          photoRef.current[i]?.removeEventListener(\"mouseleave\", () => {\n            buttonRef.current[i]!.style.display = \"none\";\n          });\n        }\n      });\n    };\n  }, [photoList]);\n  return (\n    <>\n      <h4 style={{color: \"black\"}}>저장된 화면캡처 화면</h4>\n      <div\n        style={{\n          width: \"90%\",\n          padding: \"10px\",\n          height: \"90vh\",\n          color: \"white\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          overflowY: \"auto\",\n        }}\n      >\n        <div style={{ minHeight: \"500px\", width: \"100%\" }}>\n          {photoList.length !== 0 &&\n            photoList.map((photo: {image: string}, i: number) => (\n              <div\n                key={i}\n                ref={(el) => (photoRef.current[i] = el)}\n                style={{\n                  width: \"100%\",\n                  height: \"250px\",\n                  marginBottom: \"10px\",\n                  position: \"relative\",\n                }}\n              >\n                <img\n                  style={{ width: \"100%\", height: \"100%\" }}\n                  src={photo.image}\n                  alt=\"asa\"\n                  onClick={() =>{\n                    setIsModal(true);\n                    setSrc(photoList[i].image);\n                  }}\n                />\n                <button\n                  ref={(el) => (buttonRef.current[i] = el)}\n                  style={{\n                    position: \"absolute\",\n                    bottom: 0,\n                    right: 2,\n                    width: \"30px\",\n                    background: \"red\",\n                    borderRadius: \"50px\",\n                    display: \"none\",\n                  }}\n                  onClick={(e) => onDeleteHandler(e, i)}\n                >\n                  x\n                </button>\n              </div>\n            ))}\n        </div>\n      </div>\n      <section style={{display: \"flex\", width: \"100%\"}}>\n        {/* {data && <div style={{width: \"300px\"}}><img src={`http://localhost:5001/images/202275/${data.filename}`} style={{width: \"100%\"}}/></div>} */}\n        {/* <button\n          onClick={savePhotoToLocal}\n          style={{\n            width: \"100%\",\n            height: \"10vh\",\n            background: \"royalblue\",\n            borderRadius: \"5px\",\n            color: \"white\",\n            fontSize: \"11px\",\n          }}>\n          내컴퓨터에 저장\n        </button> */}\n      </section>\n    </>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { useScreenshot } from \"use-screenshot-hook\";\nimport { UseScreenshotProps } from \"use-screenshot-hook/dist/types\";\nimport { PhotoType } from \"../types/PrescriptionType\";\n\ninterface ElObjectType {\n    eltype: \"className\" | \"id\";\n    elname: string \n}\n\nfunction useCapture(setPhotoList: Function, photoList: PhotoType[], elObject: ElObjectType) {\n  //ref는 고정적으로 값을 가지고 있음\n  const vedioRef = useRef();\n  const [isClick, setIsClick] = useState(false as any);\n  const { image, takeScreenshot } = useScreenshot({\n    ref: vedioRef,\n  } as UseScreenshotProps);\n\n  const clickCapture = () => {\n    //비디오 켰을 때 캡쳐 가능\n    let tempRef;\n    if(elObject.eltype===\"className\"){\n        tempRef = document.querySelector(`.${elObject.elname}`);\n    }else if(elObject.eltype===\"id\") {\n        tempRef = document.querySelector(`#${elObject.elname}`);\n    }\n    const canvasRef = tempRef\n    vedioRef.current = canvasRef as any;\n    console.log(vedioRef.current);\n    //클릭 완료!\n    setIsClick(true);\n  };\n  \n  //캡처 이미지 저장하는 함수\n  const setImage = useCallback(async(image: string) =>{\n    const now = new Date();\n    const fileName = `photo_${now.getFullYear()}${now.getMonth() + 1}${now.getDate()}${now.getHours()}${now.getMinutes()}${now.getSeconds()}.png`;\n\n    await fetch(image)\n      .then(res => res.blob())\n      .then(blob => {\n        const file = new File([blob], fileName,{ type: \"image/png\" });\n        const obj:PhotoType = {\n          image: image,\n          name: fileName,\n          file: file\n        }\n        setPhotoList([obj, ...photoList]);\n      });\n  },[photoList, setPhotoList])\n\n  //클릭했을 때 반응\n  useEffect(() => {\n    if (isClick) {\n      takeScreenshot();\n    }\n  }, [isClick, takeScreenshot]);\n\n  //클릭 후 이미지 저장 반응  \n  useEffect(() => {\n    if (isClick && image) {\n      setImage(image);\n      setIsClick(false);\n    }\n  }, [isClick, image, setImage]);\n\n  return {clickCapture, image};\n}\n\nexport default useCapture;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { useScreenshot } from \"use-screenshot-hook\";\nimport { UseScreenshotProps } from \"use-screenshot-hook/dist/types\";\nimport useCapture from \"../hook/useCapture\";\nimport { PhotoType } from \"../types/PrescriptionType\";\n\n\nfunction CaptureButton({ setPhotoList, photoList }: any) {\n  const {clickCapture} = useCapture(setPhotoList, photoList, {eltype: \"className\", elname: 'single-main-container__canvas'});\n\n\n  return (\n    <>\n      <button\n        id=\"screenshot_btn\"\n        style={{\n          width: \"100px\",\n          height: \"40px\",\n          background: \"royalblue\",\n          borderRadius: \"5px\",\n          color: \"white\",\n          fontSize: \"11px\",\n          margin: \"3px\"\n        }}\n        onClick={clickCapture}\n      >\n        화면캡처\n      </button>\n    </>\n  );\n}\n\nexport default CaptureButton;\n","import React, { useState } from 'react'\n\nfunction CheckToolButton({onClickHandler}: any) {\n  return (\n    <button style={{\n      width: \"100px\",\n      height: \"40px\",\n      background: \"royalblue\",\n      borderRadius: \"5px\",\n      color: \"white\",\n      fontSize: \"11px\",\n      margin: \"3px\"\n    }}\n    onClick={onClickHandler('CheckTool')}>\n      검사툴\n    </button>\n  )\n}\n\nexport default CheckToolButton","import React, { useRef, useState } from \"react\";\n\nfunction CaptureListButton({onClickHandler}: any) {\n  //ref는 고정적으로 값을 가지고 있음\n  const btnIdRef = useRef() as any;\n\n  return (\n      <button\n        ref={btnIdRef}\n        style={{\n          width: \"100px\",\n          height: \"40px\",\n          background: \"royalblue\",\n          borderRadius: \"5px\",\n          color: \"white\",\n          fontSize: \"11px\",\n          margin: \"3px\"\n        }}\n        onClick={onClickHandler('CaptureList')}\n      >\n        저장된 화면캡처 화면\n      </button>\n  );\n}\n\nexport default CaptureListButton;\n","import React, { useState } from \"react\";\n\nfunction RecordAndPrescriptionButton({ onClickHandler }: any) {\n  return (\n    <button\n      onClick={onClickHandler(\"RecordAndPrescription\")}\n      style={{\n        width: \"100px\",\n        height: \"40px\",\n        background: \"royalblue\",\n        borderRadius: \"5px\",\n        color: \"white\",\n        fontSize: \"11px\",\n        margin: \"3px\",\n      }}\n    >\n      진단 기록 및 운동(VOD) 처방\n    </button>\n  );\n}\n\nexport default RecordAndPrescriptionButton;\n","import React, { useState } from 'react'\n\n// setCurrentPage: 페이지를 잡아주는 useState 함수\nfunction usePage(setCurrentPage: Function) {\n    const [isClick, setIsClick] = useState(0 as number);\n\n    const onClickHandler = (pageName: string) => () => {\n      //풀림페이지 생성\n      const catchPullimRef = document.getElementById(\n        \"pullim-page\"\n      ) as HTMLDivElement;\n      if (isClick % 2 === 0) {\n        catchPullimRef.style.display = \"flex\";\n      } else {\n        catchPullimRef.style.display = \"none\";\n      }\n      setIsClick(isClick + 1); //클릭시 +1!\n      setCurrentPage(pageName);\n    };\n    return onClickHandler\n}\n\nexport default usePage;","import React from 'react';\n\n\nfunction DiagnosticHistoryButton({onClickHandler}: any) {\n  return (\n    <button style={{\n        width: \"100px\",\n        height: \"40px\",\n        background: \"royalblue\",\n        borderRadius: \"5px\",\n        color: \"white\",\n        fontSize: \"11px\",\n        margin: \"3px\"\n      }} onClick={onClickHandler('DiagnosticHistory')}>진단기록</button>\n  )\n}\n\nexport default DiagnosticHistoryButton;","import React, { useEffect, useRef } from \"react\";\nimport CaptureButton from \"./CaptureButton\";\nimport CheckToolButton from \"./CheckToolButton\";\nimport CaptureListButton from \"./CaptureListButton\";\nimport RecordAndPrescriptionButton from \"./RecordAndPrescriptionButton\";\nimport usePage from \"../hook/usePage\";\nimport DiagnosticHistoryButton from \"./DiagnosticHistoryButton\";\n\nfunction ButtonGroup(\n  { setPhotoList, photoList, setCurrentPage }: any = { Function, Array }\n) {\n  const onClickHandler = usePage(setCurrentPage);\n  const Container = useRef<any>();\n  const buttonGroupRef = useRef<any>();\n\n  useEffect(() => {\n    if (buttonGroupRef.current !==undefined && Container.current !== undefined){\n      Container.current.addEventListener(\"mouseover\", () => {\n        buttonGroupRef.current.style.display = \"flex\";\n      });\n      Container.current.addEventListener(\"mouseleave\", () => {\n        buttonGroupRef.current.style.display = \"none\";\n      });\n    }\n    return () => {\n      if(buttonGroupRef!.current !==undefined && Container!.current !== undefined){\n        Container!.current.removeEventListener(\"mouseover\", () => {\n          buttonGroupRef!.current.style.display = \"flex\";\n        });\n        Container!.current.removeEventListener(\"mouseleave\", () => {\n          buttonGroupRef!.current.style.display = \"none\";\n        });\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      ref={Container}\n      style={{\n        position: \"absolute\",\n        bottom: \"15%\",\n        zIndex: 100,\n        left: \"1%\",\n        width: \"150px\",\n        height: \"70%\",\n        minHeight: \"180px\",\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        ref={buttonGroupRef}\n        style={{\n          display: \"none\",\n          flexDirection: \"column\",\n          width: \"300px\"\n        }}\n      >\n        <CaptureListButton onClickHandler={onClickHandler} />\n        <CaptureButton setPhotoList={setPhotoList} photoList={photoList} />\n        <CheckToolButton onClickHandler={onClickHandler} />\n        <RecordAndPrescriptionButton onClickHandler={onClickHandler} />\n        <DiagnosticHistoryButton onClickHandler={onClickHandler}/>\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonGroup;\n","import axios from \"axios\";\nimport React from \"react\";\nimport { PhotoType, FileType } from \"../types/PrescriptionType\";\n\ninterface RecordAndPrescriptionPropsType {\n  photoList: PhotoType[];\n  uploadedPhotoList: PhotoType[];\n  setUploadedPhotoList: Function;\n  videoList: FileType[];\n  setVideoList: Function;\n  memo: string;\n  setMemo: Function\n}\n\nfunction RecordAndPrescription({\n  photoList,\n  uploadedPhotoList,\n  setUploadedPhotoList,\n  videoList,\n  setVideoList,\n  memo,\n  setMemo\n}: RecordAndPrescriptionPropsType) {\n\n  const changeMemo = (e: React.ChangeEvent<HTMLTextAreaElement>) =>{\n    setMemo(e.target.value);\n  }\n  \n  const readUploadedFileAsImage = (inputFile: File, i: number) => {\n    const fileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n      // 에러날 시\n      fileReader.onerror = () => {\n        fileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n      // 사진 잘 올라갈 시\n      fileReader.onload = () => {\n        const base64Data = fileReader.result;\n        const fileName = inputFile.name;\n\n        const obj = {\n          image: base64Data,\n          name: fileName,\n          file: inputFile,\n        };\n        resolve(obj);\n      };\n      fileReader.readAsDataURL(inputFile);\n    });\n  };\n\n  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files!;\n    try {\n      const fileContents = await Promise.all(\n        Array.from(files).map((file, i) => readUploadedFileAsImage(file, i))\n      );\n      setUploadedPhotoList(fileContents, ...uploadedPhotoList);\n    } catch (e: any) {\n      console.log(e.message);\n    }\n  };\n\n  const savePrescription = async () => {\n    let formData = new FormData();\n    const entirePhotos = photoList.concat(uploadedPhotoList);\n    if(memo===''){\n      return alert('메모를 입력해주세요.');\n    }\n    formData.append('memo', memo);\n    entirePhotos.forEach((photo: { file: File }, i: number) => {\n      const { file } = photo;\n      // const data = new Blob([photo], { type: \"image/png\" });\n      // formData.append(\"photos\", data, \"photo\" + i);\n      formData.append(\"photos\", file);\n    });\n    videoList.forEach((videoFile:{ file: File}) =>{\n      const {file} = videoFile;\n      formData.append(\"videos\", file);\n    });\n    const response = await axios\n      .post(\"/photo\", formData)\n      .then((res) => res.data);\n    if (response.success) {\n      alert(\"저장 완료!\");\n    }\n    // setData(response.photo);\n  };\n\n  const videoUploadHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      const videoFiles = event.target.files;\n      const videos = Array.from(videoFiles).map((videoFile): FileType => ({name: videoFile.name, file: videoFile}));\n      setVideoList(videos);\n    }\n  };\n  return (\n    <>\n      <h4 style={{ color: \"black\" }}>진단 기록 및 운동(VOD) 처방</h4>\n      <div\n        style={{\n          margin: \"5px\",\n          padding: \"0px 10px 0px 10px\",\n          width: \"90%\",\n          height: \"90vh\",\n          overflowY: \"auto\",\n        }}\n      >\n        <h4>1. 메모</h4>\n        <textarea\n          onChange={changeMemo}\n          value={memo}\n          style={{\n            minWidth: \"100%\",\n            minHeight: \"200px\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            borderRadius: \"3%\",\n          }}\n        ></textarea>\n        <h4>2. 사진 업로드</h4>\n        <input\n          type=\"file\"\n          id=\"photoSelector\"\n          onChange={handleUpload}\n          multiple\n          style={{ width: \"100%\" }}\n        />\n        <h5>- 업로드한 사진(여러 사진 업로드 가능)</h5>\n        <div className=\"photosContainer\" style={{ width: \"100%\" }}>\n          {uploadedPhotoList.length !== 0 &&\n            uploadedPhotoList.map((photo: any, i: number) => (\n              <div key={i} className=\"photo\" style={{ width: \"100%\" }}>\n                <img\n                  style={{ width: \"100%\" }}\n                  src={photo.image}\n                  alt={photo.name}\n                />\n              </div>\n            ))}\n        </div>\n        <h5>- 캡처한 사진</h5>\n        <div className=\"photosContainer\" style={{ width: \"100%\" }}>\n          {photoList.length !== 0 &&\n            photoList.map((photo: any, i: number) => (\n              <div key={i} className=\"photo\" style={{ width: \"100%\" }}>\n                <img\n                  style={{ width: \"100%\" }}\n                  src={photo.image}\n                  alt={photo.name}\n                />\n              </div>\n            ))}\n        </div>\n        <h4>3. 운동 VOD처방하기</h4>\n        <input\n          type=\"file\"\n          id=\"videoSelector\"\n          onChange={videoUploadHandler}\n          multiple\n          style={{ width: \"100%\" }}\n        />\n        <div></div>\n      </div>\n      <button\n        style={{\n          width: \"100%\",\n          height: \"10vh\",\n          background: \"red\",\n          borderRadius: \"5px\",\n          color: \"white\",\n          fontSize: \"11px\",\n        }}\n        onClick={savePrescription}\n      >\n        처방전 저장\n      </button>\n    </>\n  );\n}\n\nexport default RecordAndPrescription;\n","export type SegmentationModel = 'bodyPix' | 'meet' | 'mlkit'\nexport type SegmentationBackend = 'webgl' | 'wasm' | 'wasmSimd'\nexport type InputResolution = '640x360' | '256x256' | '256x144' | '160x96'\n\nexport const inputResolutions: {\n  [resolution in InputResolution]: [number, number]\n} = {\n  '640x360': [640, 360],\n  '256x256': [256, 256],\n  '256x144': [256, 144],\n  '160x96': [160, 96],\n}\n\nexport type PipelineName = 'canvas2dCpu' | 'webgl2'\n\nexport type SegmentationConfig = {\n  model: SegmentationModel\n  backend: SegmentationBackend\n  inputResolution: InputResolution\n  pipeline: PipelineName\n}\n\nexport function getTFLiteModelFileName(\n  model: SegmentationModel,\n  inputResolution: InputResolution\n) {\n  switch (model) {\n    case 'meet':\n      return inputResolution === '256x144' ? 'segm_full_v679' : 'segm_lite_v681'\n\n    case 'mlkit':\n      return 'selfiesegmentation_mlkit-256x256-2021_01_19-v1215.f16'\n\n    default:\n      throw new Error(`No TFLite file for this segmentation model: ${model}`)\n  }\n}\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\n\nexport function buildCanvas2dPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const ctx = canvas.getContext('2d')!\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\n  const segmentationMaskCanvas = document.createElement('canvas')\n  segmentationMaskCanvas.width = segmentationWidth\n  segmentationMaskCanvas.height = segmentationHeight\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\n\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  let postProcessingConfig: PostProcessingConfig\n\n  async function render() {\n    if (backgroundConfig.type !== 'none') {\n      resizeSource()\n    }\n\n    addFrameEvent()\n\n    if (backgroundConfig.type !== 'none') {\n      if (segmentationConfig.model === 'bodyPix') {\n        await runBodyPixInference()\n      } else {\n        runTFLiteInference()\n      }\n    }\n\n    addFrameEvent()\n\n    runPostProcessing()\n  }\n\n  function updatePostProcessingConfig(\n    newPostProcessingConfig: PostProcessingConfig\n  ) {\n    postProcessingConfig = newPostProcessingConfig\n  }\n\n  function cleanUp() {\n    // Nothing to clean up in this rendering pipeline\n  }\n\n  function resizeSource() {\n    segmentationMaskCtx.drawImage(\n      sourcePlayback.htmlElement,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight\n    )\n\n    if (\n      segmentationConfig.model === 'meet' ||\n      segmentationConfig.model === 'mlkit'\n    ) {\n      const imageData = segmentationMaskCtx.getImageData(\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight\n      )\n\n      for (let i = 0; i < segmentationPixelCount; i++) {\n        tflite.HEAPF32[inputMemoryOffset + i * 3] = imageData.data[i * 4] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 1] =\n          imageData.data[i * 4 + 1] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 2] =\n          imageData.data[i * 4 + 2] / 255\n      }\n    }\n  }\n\n  async function runBodyPixInference() {\n    const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runTFLiteInference() {\n    tflite._runInference()\n\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      if (segmentationConfig.model === 'meet') {\n        const background = tflite.HEAPF32[outputMemoryOffset + i * 2]\n        const person = tflite.HEAPF32[outputMemoryOffset + i * 2 + 1]\n        const shift = Math.max(background, person)\n        const backgroundExp = Math.exp(background - shift)\n        const personExp = Math.exp(person - shift)\n\n        // Sets only the alpha component of each pixel\n        segmentationMask.data[i * 4 + 3] =\n          (255 * personExp) / (backgroundExp + personExp) // softmax\n      } else if (segmentationConfig.model === 'mlkit') {\n        const person = tflite.HEAPF32[outputMemoryOffset + i]\n        segmentationMask.data[i * 4 + 3] = 255 * person\n      }\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runPostProcessing() {\n    ctx.globalCompositeOperation = 'copy'\n    ctx.filter = 'none'\n\n    if (postProcessingConfig?.smoothSegmentationMask) {\n      if (backgroundConfig.type === 'blur') {\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      } else if (backgroundConfig.type === 'image') {\n        ctx.filter = 'blur(4px)' // FIXME Does not work on Safari\n      }\n    }\n\n    if (backgroundConfig.type !== 'none') {\n      drawSegmentationMask()\n      ctx.globalCompositeOperation = 'source-in'\n      ctx.filter = 'none'\n    }\n\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n\n    if (backgroundConfig.type === 'blur') {\n      blurBackground()\n    }\n  }\n\n  function drawSegmentationMask() {\n    ctx.drawImage(\n      segmentationMaskCanvas,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height\n    )\n  }\n\n  function blurBackground() {\n    ctx.globalCompositeOperation = 'destination-over'\n    ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nexport const glsl = String.raw\n\nexport function createPiplelineStageProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer\n) {\n  const program = createProgram(gl, vertexShader, fragmentShader)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\n  gl.enableVertexAttribArray(positionAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord')\n  gl.enableVertexAttribArray(texCoordAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  return program\n}\n\nexport function createProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) {\n  const program = gl.createProgram()!\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      `Could not link WebGL program: ${gl.getProgramInfoLog(program)}`\n    )\n  }\n  return program\n}\n\nexport function compileShader(\n  gl: WebGL2RenderingContext,\n  shaderType: number,\n  shaderSource: string\n) {\n  const shader = gl.createShader(shaderType)!\n  gl.shaderSource(shader, shaderSource)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`)\n  }\n  return shader\n}\n\nexport function createTexture(\n  gl: WebGL2RenderingContext,\n  internalformat: number,\n  width: number,\n  height: number,\n  minFilter = gl.NEAREST,\n  magFilter = gl.NEAREST\n) {\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n  gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height)\n  return texture\n}\n\nexport async function readPixelsAsync(\n  gl: WebGL2RenderingContext,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  format: number,\n  type: number,\n  dest: ArrayBufferView\n) {\n  const buf = gl.createBuffer()!\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf)\n  gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ)\n  gl.readPixels(x, y, width, height, format, type, 0)\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null)\n\n  await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest)\n\n  gl.deleteBuffer(buf)\n  return dest\n}\n\nasync function getBufferSubDataAsync(\n  gl: WebGL2RenderingContext,\n  target: number,\n  buffer: WebGLBuffer,\n  srcByteOffset: number,\n  dstBuffer: ArrayBufferView,\n  dstOffset?: number,\n  length?: number\n) {\n  const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!\n  gl.flush()\n  const res = await clientWaitAsync(gl, sync)\n  gl.deleteSync(sync)\n\n  if (res !== gl.WAIT_FAILED) {\n    gl.bindBuffer(target, buffer)\n    gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length)\n    gl.bindBuffer(target, null)\n  }\n}\n\nfunction clientWaitAsync(gl: WebGL2RenderingContext, sync: WebGLSync) {\n  return new Promise<number>((resolve) => {\n    function test() {\n      const res = gl.clientWaitSync(sync, 0, 0)\n      if (res === gl.WAIT_FAILED) {\n        resolve(res)\n        return\n      }\n      if (res === gl.TIMEOUT_EXPIRED) {\n        requestAnimationFrame(test)\n        return\n      }\n      resolve(res)\n    }\n    requestAnimationFrame(test)\n  })\n}\n","import {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport type BackgroundBlurStage = {\n  render(): void\n  updateCoverage(coverage: [number, number]): void\n  cleanUp(): void\n}\n\nexport function buildBackgroundBlurStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n): BackgroundBlurStage {\n  const blurPass = buildBlurPass(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    personMaskTexture,\n    canvas\n  )\n  const blendPass = buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas)\n\n  function render() {\n    blurPass.render()\n    blendPass.render()\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    blendPass.updateCoverage(coverage)\n  }\n\n  function cleanUp() {\n    blendPass.cleanUp()\n    blurPass.cleanUp()\n  }\n\n  return {\n    render,\n    updateCoverage,\n    cleanUp,\n  }\n}\n\nfunction buildBlurPass(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    const float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);\n    const float weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,\n      0.0540540541, 0.0162162162);\n\n    void main() {\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\n      float personMask = texture(u_personMask, v_texCoord).a;\n\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\n\n      for (int i = 1; i < 5; i++) {\n        vec2 offset = vec2(offset[i]) * u_texelSize;\n\n        vec2 texCoord = v_texCoord + offset;\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\n          (1.0 - texture(u_personMask, texCoord).a);\n\n        texCoord = v_texCoord - offset;\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\n          (1.0 - texture(u_personMask, texCoord).a);\n      }\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\n    }\n  `\n\n  const scale = 0.5\n  const outputWidth = canvas.width * scale\n  const outputHeight = canvas.height * scale\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const texture1 = createTexture(\n    gl,\n    gl.RGBA8,\n    outputWidth,\n    outputHeight,\n    gl.NEAREST,\n    gl.LINEAR\n  )\n  const texture2 = createTexture(\n    gl,\n    gl.RGBA8,\n    outputWidth,\n    outputHeight,\n    gl.NEAREST,\n    gl.LINEAR\n  )\n\n  const frameBuffer1 = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture1,\n    0\n  )\n\n  const frameBuffer2 = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture2,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(personMaskLocation, 1)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.uniform1i(inputFrameLocation, 0)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n\n    for (let i = 0; i < 3; i++) {\n      gl.uniform2f(texelSizeLocation, 0, texelHeight)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n      gl.activeTexture(gl.TEXTURE2)\n      gl.bindTexture(gl.TEXTURE_2D, texture1)\n      gl.uniform1i(inputFrameLocation, 2)\n\n      gl.uniform2f(texelSizeLocation, texelWidth, 0)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n      gl.bindTexture(gl.TEXTURE_2D, texture2)\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer2)\n    gl.deleteFramebuffer(frameBuffer1)\n    gl.deleteTexture(texture2)\n    gl.deleteTexture(texture1)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return {\n    render,\n    cleanUp,\n  }\n}\n\nfunction buildBlendPass(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  canvas: HTMLCanvasElement\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_blurredInputFrame;\n    uniform vec2 u_coverage;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec3 color = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 blurredColor = texture(u_blurredInputFrame, v_texCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(mix(blurredColor, color, personMask), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const blurredInputFrame = gl.getUniformLocation(\n    program,\n    'u_blurredInputFrame'\n  )\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n  gl.uniform1i(blurredInputFrame, 2)\n  gl.uniform2f(coverageLocation, 0, 1)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    gl.useProgram(program)\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\n  }\n\n  function cleanUp() {\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return {\n    render,\n    updateCoverage,\n    cleanUp,\n  }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n  readPixelsAsync,\n} from '../helpers/webglHelper'\n\nexport function buildResizingStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4\n\n  const [outputWidth, outputHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const outputPixelCount = outputWidth * outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight)\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n  const outputPixels = new Uint8Array(outputPixelCount * 4)\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    // Downloads pixels asynchronously from GPU while rendering the current frame\n    readPixelsAsync(\n      gl,\n      0,\n      0,\n      outputWidth,\n      outputHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      outputPixels\n    )\n\n    for (let i = 0; i < outputPixelCount; i++) {\n      const tfliteIndex = tfliteInputMemoryOffset + i * 3\n      const outputIndex = i * 4\n      tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255\n      tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255\n      tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(outputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\nimport {\n  BackgroundBlurStage,\n  buildBackgroundBlurStage,\n} from './backgroundBlurStage'\nimport {\n  BackgroundImageStage,\n  buildBackgroundImageStage,\n} from './backgroundImageStage'\nimport { buildJointBilateralFilterStage } from './jointBilateralFilterStage'\nimport { buildLoadSegmentationStage } from './loadSegmentationStage'\nimport { buildResizingStage } from './resizingStage'\nimport { buildSoftmaxStage } from './softmaxStage'\n\nexport function buildWebGL2Pipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundImage: HTMLImageElement | null,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const { width: frameWidth, height: frameHeight } = sourcePlayback\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  //preserveDrawingBuffer옵션은 버퍼에 데이터를 남기도록 하느 것이다. 사양을 위해서 원래는 비우는 것 같음.\n  const gl = canvas.getContext('webgl2', {preserveDrawingBuffer: true})!\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n\n  const vertexArray = gl.createVertexArray()\n  gl.bindVertexArray(vertexArray)\n\n  const positionBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const texCoordBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  // We don't use texStorage2D here because texImage2D seems faster\n  // to upload video texture than texSubImage2D even though the latter\n  // is supposed to be the recommended way:\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n  const inputFrameTexture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  // TODO Rename segmentation and person mask to be more specific\n  const segmentationTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    segmentationWidth,\n    segmentationHeight\n  )!\n  const personMaskTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    frameWidth,\n    frameHeight\n  )!\n\n  const resizingStage = buildResizingStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite\n  )\n  const loadSegmentationStage =\n    segmentationConfig.model === 'meet'\n      ? buildSoftmaxStage(\n          gl,\n          vertexShader,\n          positionBuffer,\n          texCoordBuffer,\n          segmentationConfig,\n          tflite,\n          segmentationTexture\n        )\n      : buildLoadSegmentationStage(\n          gl,\n          vertexShader,\n          positionBuffer,\n          texCoordBuffer,\n          segmentationConfig,\n          tflite,\n          segmentationTexture\n        )\n  const jointBilateralFilterStage = buildJointBilateralFilterStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationTexture,\n    segmentationConfig,\n    personMaskTexture,\n    canvas\n  )\n  const backgroundStage =\n    backgroundConfig.type === 'blur'\n      ? buildBackgroundBlurStage(\n          gl,\n          vertexShader,\n          positionBuffer,\n          texCoordBuffer,\n          personMaskTexture,\n          canvas\n        )\n      : buildBackgroundImageStage(\n          gl,\n          positionBuffer,\n          texCoordBuffer,\n          personMaskTexture,\n          backgroundImage,\n          canvas\n        )\n\n  async function render() {\n    gl.clearColor(0, 0, 0, 0)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n\n    // texImage2D seems faster than texSubImage2D to upload\n    // video texture\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      sourcePlayback.htmlElement\n    )\n\n    gl.bindVertexArray(vertexArray)\n\n    resizingStage.render()\n\n    addFrameEvent()\n\n    tflite._runInference()\n\n    addFrameEvent()\n\n    loadSegmentationStage.render()\n    jointBilateralFilterStage.render()\n    backgroundStage.render()\n  }\n\n  function updatePostProcessingConfig(\n    postProcessingConfig: PostProcessingConfig\n  ) {\n    jointBilateralFilterStage.updateSigmaSpace(\n      postProcessingConfig.jointBilateralFilter.sigmaSpace\n    )\n    jointBilateralFilterStage.updateSigmaColor(\n      postProcessingConfig.jointBilateralFilter.sigmaColor\n    )\n\n    if (backgroundConfig.type === 'image') {\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage(postProcessingConfig.coverage)\n      backgroundImageStage.updateLightWrapping(\n        postProcessingConfig.lightWrapping\n      )\n      backgroundImageStage.updateBlendMode(postProcessingConfig.blendMode)\n    } else if (backgroundConfig.type === 'blur') {\n      const backgroundBlurStage = backgroundStage as BackgroundBlurStage\n      backgroundBlurStage.updateCoverage(postProcessingConfig.coverage)\n    } else {\n      // TODO Handle no background in a separate pipeline path\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage([0, 0.9999])\n      backgroundImageStage.updateLightWrapping(0)\n    }\n  }\n\n  function cleanUp() {\n    backgroundStage.cleanUp()\n    jointBilateralFilterStage.cleanUp()\n    loadSegmentationStage.cleanUp()\n    resizingStage.cleanUp()\n\n    gl.deleteTexture(personMaskTexture)\n    gl.deleteTexture(segmentationTexture)\n    gl.deleteTexture(inputFrameTexture)\n    gl.deleteBuffer(texCoordBuffer)\n    gl.deleteBuffer(positionBuffer)\n    gl.deleteVertexArray(vertexArray)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildSoftmaxStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite,\n  outputTexture: WebGLTexture\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\n  const inputTexture = createTexture(\n    gl,\n    gl.RG32F,\n    segmentationWidth,\n    segmentationHeight\n  )\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputLocation, 1)\n\n  function render() {\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      gl.RG,\n      gl.FLOAT,\n      tflite.HEAPF32,\n      tfliteOutputMemoryOffset\n    )\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(inputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildLoadSegmentationStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite,\n  outputTexture: WebGLTexture\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      float segmentation = texture(u_inputSegmentation, v_texCoord).r;\n      outColor = vec4(vec3(0.0), segmentation);\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\n  const inputTexture = createTexture(\n    gl,\n    gl.R32F,\n    segmentationWidth,\n    segmentationHeight\n  )\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputLocation, 1)\n\n  function render() {\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      gl.RED,\n      gl.FLOAT,\n      tflite.HEAPF32,\n      tfliteOutputMemoryOffset\n    )\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(inputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildJointBilateralFilterStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  inputTexture: WebGLTexture,\n  segmentationConfig: SegmentationConfig,\n  outputTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const { width: outputWidth, height: outputHeight } = canvas\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const segmentationMaskLocation = gl.getUniformLocation(\n    program,\n    'u_segmentationMask'\n  )\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const stepLocation = gl.getUniformLocation(program, 'u_step')\n  const radiusLocation = gl.getUniformLocation(program, 'u_radius')\n  const offsetLocation = gl.getUniformLocation(program, 'u_offset')\n  const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel')\n  const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor')\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(segmentationMaskLocation, 1)\n  gl.uniform2f(texelSizeLocation, texelWidth, texelHeight)\n\n  // Ensures default values are configured to prevent infinite\n  // loop in fragment shader\n  updateSigmaSpace(0)\n  updateSigmaColor(0)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateSigmaSpace(sigmaSpace: number) {\n    sigmaSpace *= Math.max(\n      outputWidth / segmentationWidth,\n      outputHeight / segmentationHeight\n    )\n\n    const kSparsityFactor = 0.66 // Higher is more sparse.\n    const sparsity = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor)\n    const step = sparsity\n    const radius = sigmaSpace\n    const offset = step > 1 ? step * 0.5 : 0\n    const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace\n\n    gl.useProgram(program)\n    gl.uniform1f(stepLocation, step)\n    gl.uniform1f(radiusLocation, radius)\n    gl.uniform1f(offsetLocation, offset)\n    gl.uniform1f(sigmaTexelLocation, sigmaTexel)\n  }\n\n  function updateSigmaColor(sigmaColor: number) {\n    gl.useProgram(program)\n    gl.uniform1f(sigmaColorLocation, sigmaColor)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, updateSigmaSpace, updateSigmaColor, cleanUp }\n}\n","import { BlendMode } from '../../core/helpers/postProcessingHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport type BackgroundImageStage = {\n  render(): void\n  updateCoverage(coverage: [number, number]): void\n  updateLightWrapping(lightWrapping: number): void\n  updateBlendMode(blendMode: BlendMode): void\n  cleanUp(): void\n}\n\nexport function buildBackgroundImageStage(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  backgroundImage: HTMLImageElement | null,\n  canvas: HTMLCanvasElement\n): BackgroundImageStage {\n  const vertexShaderSource = glsl`#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n    uniform vec2 u_coverage;\n    uniform float u_lightWrapping;\n    uniform float u_blendMode;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap) +\n        (1.0 - u_blendMode) * screen(frameColor, lightWrap);\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n  const outputRatio = outputWidth / outputHeight\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const backgroundScaleLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundScale'\n  )\n  const backgroundOffsetLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundOffset'\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const backgroundLocation = gl.getUniformLocation(program, 'u_background')\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\n  const lightWrappingLocation = gl.getUniformLocation(\n    program,\n    'u_lightWrapping'\n  )\n  const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode')\n\n  gl.useProgram(program)\n  gl.uniform2f(backgroundScaleLocation, 1, 1)\n  gl.uniform2f(backgroundOffsetLocation, 0, 0)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n  gl.uniform2f(coverageLocation, 0, 1)\n  gl.uniform1f(lightWrappingLocation, 0)\n  gl.uniform1f(blendModeLocation, 0)\n\n  let backgroundTexture: WebGLTexture | null = null\n  // TODO Find a better to handle background being loaded\n  if (backgroundImage?.complete) {\n    updateBackgroundImage(backgroundImage)\n  } else if (backgroundImage) {\n    backgroundImage.onload = () => {\n      updateBackgroundImage(backgroundImage)\n    }\n  }\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n    if (backgroundTexture !== null) {\n      gl.activeTexture(gl.TEXTURE2)\n      gl.bindTexture(gl.TEXTURE_2D, backgroundTexture)\n      // TODO Handle correctly the background not loaded yet\n      gl.uniform1i(backgroundLocation, 2)\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateBackgroundImage(backgroundImage: HTMLImageElement) {\n    backgroundTexture = createTexture(\n      gl,\n      gl.RGBA8,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.LINEAR,\n      gl.LINEAR\n    )\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      backgroundImage\n    )\n\n    let xOffset = 0\n    let yOffset = 0\n    let backgroundWidth = backgroundImage.naturalWidth\n    let backgroundHeight = backgroundImage.naturalHeight\n    const backgroundRatio = backgroundWidth / backgroundHeight\n    if (backgroundRatio < outputRatio) {\n      backgroundHeight = backgroundWidth / outputRatio\n      yOffset = (backgroundImage.naturalHeight - backgroundHeight) / 2\n    } else {\n      backgroundWidth = backgroundHeight * outputRatio\n      xOffset = (backgroundImage.naturalWidth - backgroundWidth) / 2\n    }\n\n    const xScale = backgroundWidth / backgroundImage.naturalWidth\n    const yScale = backgroundHeight / backgroundImage.naturalHeight\n    xOffset /= backgroundImage.naturalWidth\n    yOffset /= backgroundImage.naturalHeight\n\n    gl.uniform2f(backgroundScaleLocation, xScale, yScale)\n    gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset)\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    gl.useProgram(program)\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\n  }\n\n  function updateLightWrapping(lightWrapping: number) {\n    gl.useProgram(program)\n    gl.uniform1f(lightWrappingLocation, lightWrapping)\n  }\n\n  function updateBlendMode(blendMode: BlendMode) {\n    gl.useProgram(program)\n    gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1)\n  }\n\n  function cleanUp() {\n    gl.deleteTexture(backgroundTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return {\n    render,\n    updateCoverage,\n    updateLightWrapping,\n    updateBlendMode,\n    cleanUp,\n  }\n}\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef, useState } from 'react'\nimport { buildCanvas2dPipeline } from '../../pipelines/canvas2d/canvas2dPipeline'\nimport { buildWebGL2Pipeline } from '../../pipelines/webgl2/webgl2Pipeline'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { RenderingPipeline } from '../helpers/renderingPipelineHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport { TFLite } from './useTFLite'\n\nfunction useRenderingPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  bodyPix: BodyPix,\n  tflite: TFLite\n) {\n  const [pipeline, setPipeline] = useState<RenderingPipeline | null>(null)\n  const backgroundImageRef = useRef<HTMLImageElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n\n  useEffect(() => {\n    // The useEffect cleanup function is not enough to stop\n    // the rendering loop when the framerate is low\n    let shouldRender = true\n\n    let previousTime = 0\n    let beginTime = 0\n    let eventCount = 0\n    let frameCount = 0\n    const frameDurations: number[] = []\n\n    let renderRequestId: number\n\n    const newPipeline =\n      segmentationConfig.pipeline === 'webgl2'\n        ? buildWebGL2Pipeline(\n            sourcePlayback,\n            backgroundImageRef.current,\n            backgroundConfig,\n            segmentationConfig,\n            canvasRef.current,\n            tflite,\n            addFrameEvent\n          )\n        : buildCanvas2dPipeline(\n            sourcePlayback,\n            backgroundConfig,\n            segmentationConfig,\n            canvasRef.current,\n            bodyPix,\n            tflite,\n            addFrameEvent\n          )\n\n    async function render() {\n      if (!shouldRender) {\n        return\n      }\n      beginFrame()\n      await newPipeline.render()\n      endFrame()\n      renderRequestId = requestAnimationFrame(render)\n    }\n\n    function beginFrame() {\n      beginTime = Date.now()\n    }\n\n    function addFrameEvent() {\n      const time = Date.now()\n      frameDurations[eventCount] = time - beginTime\n      beginTime = time\n      eventCount++\n    }\n\n    function endFrame() {\n      const time = Date.now()\n      frameDurations[eventCount] = time - beginTime\n      frameCount++\n      if (time >= previousTime + 1000) {\n        setFps((frameCount * 1000) / (time - previousTime))\n        setDurations(frameDurations)\n        previousTime = time\n        frameCount = 0\n      }\n      eventCount = 0\n    }\n\n    render()\n    console.log(\n      'Animation started:',\n      sourcePlayback,\n      backgroundConfig,\n      segmentationConfig\n    )\n\n    setPipeline(newPipeline)\n\n    return () => {\n      shouldRender = false\n      cancelAnimationFrame(renderRequestId)\n      newPipeline.cleanUp()\n      console.log(\n        'Animation stopped:',\n        sourcePlayback,\n        backgroundConfig,\n        segmentationConfig\n      )\n\n      setPipeline(null)\n    }\n  }, [sourcePlayback, backgroundConfig, segmentationConfig, bodyPix, tflite])\n\n  return {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations,\n  }\n}\n\nexport default useRenderingPipeline\n","import { BodyPix } from \"@tensorflow-models/body-pix\";\nimport React, { useEffect } from \"react\";\nimport { BackgroundConfig } from \"../core/helpers/backgroundHelper\";\nimport { PostProcessingConfig } from \"../core/helpers/postProcessingHelper\";\nimport { SegmentationConfig } from \"../core/helpers/segmentationHelper\";\nimport { SourcePlayback } from \"../core/helpers/sourceHelper\";\nimport useRenderingPipeline from \"../core/hooks/useRenderingPipeline\";\nimport { TFLite } from \"../core/hooks/useTFLite\";\n\ninterface VirtualPhotoPropsType {\n  sourcePlayback: SourcePlayback;\n  backgroundConfig: BackgroundConfig;\n  segmentationConfig: SegmentationConfig;\n  postProcessingConfig: PostProcessingConfig;\n  bodyPix: BodyPix;\n  tflite: TFLite;\n}\n\nfunction VirtualPhoto(props: VirtualPhotoPropsType) {\n  const {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    // fps,\n    // durations: [resizingDuration, inferenceDuration, postProcessingDuration],\n  } = useRenderingPipeline(\n    props.sourcePlayback,\n    props.backgroundConfig,\n    props.segmentationConfig,\n    props.bodyPix,\n    props.tflite\n  );\n\n  useEffect(() => {\n    if (pipeline) {\n      pipeline.updatePostProcessingConfig(props.postProcessingConfig);\n    }\n  }, [pipeline, props.postProcessingConfig]);\n\n\n  return (\n    <>\n      <div style={{ width: \"400px\", height: \"250px\", position: \"absolute\", right: \"0\"}}>\n        {props.backgroundConfig.type === \"image\" && (\n          <img\n            ref={backgroundImageRef}\n            src={props.backgroundConfig.url}\n            alt=\"\"\n            hidden={props.segmentationConfig.pipeline === \"webgl2\"}\n            style={{\n              position: \"absolute\",\n              width: \"100%\",\n              height: \"100%\",\n              objectFit: \"cover\",\n            }}\n            />\n            )}\n        <canvas\n          id=\"grid-bg-photo\"\n          // The key attribute is required to create a new canvas when switching\n          // context mode\n          key={props.segmentationConfig.pipeline}\n          ref={canvasRef}\n          width={props.sourcePlayback.width}\n          height={props.sourcePlayback.height}\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\",\n          }}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default VirtualPhoto;\n","export type BackgroundConfig = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n}\n\nexport const backgroundImageUrls = [\n  'grid_background',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.png`)\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPix(await tfBodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPix\n}\n\nexport default useBodyPix\n","import { useEffect, useState } from 'react'\nimport {\n  getTFLiteModelFileName,\n  SegmentationConfig,\n} from '../helpers/segmentationHelper'\n\ndeclare function createTFLiteModule(): Promise<TFLite>\ndeclare function createTFLiteSIMDModule(): Promise<TFLite>\n\nexport interface TFLite extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite(segmentationConfig: SegmentationConfig) {\n  const [tflite, setTFLite] = useState<TFLite>()\n  const [tfliteSIMD, setTFLiteSIMD] = useState<TFLite>()\n  const [selectedTFLite, setSelectedTFLite] = useState<TFLite>()\n  const [isSIMDSupported, setSIMDSupported] = useState(false)\n\n  useEffect(() => {\n    async function loadTFLite() {\n      createTFLiteModule().then(setTFLite)\n      try {\n        const createdTFLiteSIMD = await createTFLiteSIMDModule()\n        setTFLiteSIMD(createdTFLiteSIMD)\n        setSIMDSupported(true)\n      } catch (error) {\n        console.warn('Failed to create TFLite SIMD WebAssembly module.', error)\n      }\n    }\n\n    loadTFLite()\n  }, [])\n\n  useEffect(() => {\n    async function loadTFLiteModel() {\n      if (\n        !tflite ||\n        (isSIMDSupported && !tfliteSIMD) ||\n        (!isSIMDSupported && segmentationConfig.backend === 'wasmSimd') ||\n        (segmentationConfig.model !== 'meet' &&\n          segmentationConfig.model !== 'mlkit')\n      ) {\n        return\n      }\n\n      setSelectedTFLite(undefined)\n\n      const newSelectedTFLite =\n        segmentationConfig.backend === 'wasmSimd' ? tfliteSIMD : tflite\n\n      if (!newSelectedTFLite) {\n        throw new Error(\n          `TFLite backend unavailable: ${segmentationConfig.backend}`\n        )\n      }\n\n      const modelFileName = getTFLiteModelFileName(\n        segmentationConfig.model,\n        segmentationConfig.inputResolution\n      )\n      console.log('Loading tflite model:', modelFileName)\n\n      const modelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\n      )\n      const model = await modelResponse.arrayBuffer()\n      console.log('Model buffer size:', model.byteLength)\n\n      const modelBufferOffset = newSelectedTFLite._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      console.log('Loading model buffer...')\n      newSelectedTFLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\n      console.log(\n        '_loadModel result:',\n        newSelectedTFLite._loadModel(model.byteLength)\n      )\n\n      console.log(\n        'Input memory offset:',\n        newSelectedTFLite._getInputMemoryOffset()\n      )\n      console.log('Input height:', newSelectedTFLite._getInputHeight())\n      console.log('Input width:', newSelectedTFLite._getInputWidth())\n      console.log('Input channels:', newSelectedTFLite._getInputChannelCount())\n\n      console.log(\n        'Output memory offset:',\n        newSelectedTFLite._getOutputMemoryOffset()\n      )\n      console.log('Output height:', newSelectedTFLite._getOutputHeight())\n      console.log('Output width:', newSelectedTFLite._getOutputWidth())\n      console.log(\n        'Output channels:',\n        newSelectedTFLite._getOutputChannelCount()\n      )\n\n      setSelectedTFLite(newSelectedTFLite)\n    }\n\n    loadTFLiteModel()\n  }, [\n    tflite,\n    tfliteSIMD,\n    isSIMDSupported,\n    segmentationConfig.model,\n    segmentationConfig.backend,\n    segmentationConfig.inputResolution,\n  ])\n\n  return { tflite: selectedTFLite, isSIMDSupported }\n}\n\nexport default useTFLite\n","import React, { SyntheticEvent, useCallback, useEffect, useRef, useState } from \"react\";\nimport { Socket, io } from \"socket.io-client\";\nimport VirtualPhoto from \"../components/VirtualPhoto\";\nimport Peer from \"simple-peer\";\n\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from \"../core/helpers/backgroundHelper\";\nimport { PostProcessingConfig } from \"../core/helpers/postProcessingHelper\";\nimport { SegmentationConfig } from \"../core/helpers/segmentationHelper\";\nimport { SourcePlayback } from \"../core/helpers/sourceHelper\";\nimport useBodyPix from \"../core/hooks/useBodyPix\";\nimport useTFLite from \"../core/hooks/useTFLite\";\nimport { PhotoType } from \"../types/PrescriptionType\";\nconst SOCKET_URL = \"http://localhost:5002\";\n\ninterface CheckToolPropsType {\n  checkedPhotoList: PhotoType[];\n  setCheckedPhotoList: Function;\n  isHost: string;\n  userName: string;\n  meetingNumber: string;\n}\n\nfunction CheckTool({\n  checkedPhotoList,\n  setCheckedPhotoList,\n  isHost,\n  userName,\n  meetingNumber,\n}: CheckToolPropsType) {\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>();\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\n    type: \"image\",\n    url: backgroundImageUrls[0],\n  });\n  const [segmentationConfig, setSegmentationConfig] =\n    useState<SegmentationConfig>({\n      model: \"meet\",\n      backend: \"wasm\",\n      inputResolution: \"160x96\",\n      pipeline: \"webgl2\",\n    });\n  const [postProcessingConfig, setPostProcessingConfig] =\n    useState<PostProcessingConfig>({\n      smoothSegmentationMask: true,\n      jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.1 },\n      coverage: [0.5, 0.75],\n      lightWrapping: 0.3,\n      blendMode: \"screen\",\n    });\n  const bodyPix = useBodyPix();\n  const { tflite, isSIMDSupported } = useTFLite(segmentationConfig);\n  const [isClick, setIsClick] = useState<Boolean>(false);\n  const [socketData, setSocketData] = useState<Socket>();\n\n  const [stream, setStream] = useState<MediaStream>();\n  const [myId, setMyId] = useState(\"\");\n  const [callAccepted, setCallAccepted] = useState(false);\n\n  const [caller, setCaller] = useState(\"\");\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [callerSignal, setCallerSignal] = useState<Peer.SignalData | string>(\n    \"\"\n  );\n  const [isLoading, setLoading] = useState(false);\n\n  const myVideo = useRef() as React.LegacyRef<HTMLVideoElement> &\n    React.MutableRefObject<HTMLVideoElement>;\n  const userVideo = useRef() as React.LegacyRef<HTMLVideoElement> &\n    React.MutableRefObject<HTMLVideoElement>;\n  const connection = useRef<Peer.Instance>();\n\n  let websocket: Socket | undefined = undefined;\n  useEffect(() => {\n    // navigator.mediaDevices\n    //   .getUserMedia({ video: true, audio: false })\n    //   .then((stream) => {\n    //     setStream(stream);\n    //     console.log(stream);\n    //     myVideo.current.srcObject = stream;\n    //   });\n    if (websocket === undefined) {\n      websocket = io(SOCKET_URL, {\n        path: \"/socket.io\", // 서버 path와 일치시켜준다\n        transports: [\"websocket\"],\n      });\n      console.log(SOCKET_URL);\n      console.log(websocket);\n\n      websocket.on(\"connect\", () => {\n        console.info(\"connect!\");\n        if (websocket !== undefined)\n          websocket.emit(\n            \"join\",\n            JSON.stringify({ room_id: meetingNumber, isHost, userName })\n          );\n      });\n\n      websocket.on(\"getid\", (id) => {\n        setMyId(id);\n      });\n\n      websocket.on(\"disconnect\", () => console.info(\"disconnect!\"));\n      setSocketData(websocket);\n    }\n  }, []);\n  useEffect(() => {\n    if (socketData && myId !== \"\") {\n      const peer = new Peer({\n        initiator: true,\n        trickle: false,\n      });\n\n      peer.on(\"signal\", (data) => {\n        socketData.emit(\"caller\", {\n          room_id: meetingNumber,\n          signalData: data,\n          from: myId,\n        });\n      });\n      peer.on(\"stream\", (stream) => {\n        console.log(stream);\n        userVideo.current.srcObject = stream;\n      });\n      socketData.on(\"acceptcall\", (signal) => {\n        setCallAccepted(true);\n        peer.signal(signal);\n      });\n      connection.current = peer;\n    }\n  }, [meetingNumber, myId, socketData]);\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    setSourcePlayback({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n    console.log(video);\n  }\n\n  const clickCheck = () => {\n    setIsClick(true);\n  };\n\n  return (\n    <>\n      <h4 style={{ color: \"black\" }}>검사툴</h4>\n      <div\n        style={{\n          width: \"90%\",\n          padding: \"10px\",\n          height: \"90vh\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          overflowY: \"auto\",\n        }}\n      >\n        <button onClick={clickCheck}>캡처하기</button>\n        <button>비디오</button>\n        {/* <div style={{ width: \"300px\", height: \"300px\", visibility: \"hidden\" }}>\n          <video\n            ref={myVideo}\n            style={{ width: \"100%\", height: \"100%\" }}\n            playsInline\n            autoPlay\n            muted\n          />\n        </div> */}\n        {callAccepted && (\n          <div style={{ width: \"300px\", height: \"300px\" }}>\n            {isLoading && <progress></progress>}\n            <video\n              style={{ width: \"100%\", height: \"100%\", visibility: \"hidden\", position: \"absolute\" }}\n              playsInline\n              ref={userVideo}\n              autoPlay\n              muted\n              onLoadedData={handleVideoLoad}\n            />\n          </div>\n        )}\n        <div id=\"image-container\">\n          {checkedPhotoList.length !== 0 &&\n            checkedPhotoList.map((checkedPhoto, i) => (\n              <div\n                key={i}\n                style={{\n                  width: \"100%\",\n                  height: \"250px\",\n                  marginBottom: \"10px\",\n                  position: \"relative\",\n                }}\n              >\n                <img\n                  style={{ width: \"100%\", height: \"100%\" }}\n                  src={checkedPhoto.image}\n                  alt={`그리드배경이 들어간 사진 ${i}`}\n                />\n              </div>\n            ))}\n        </div>\n        {sourcePlayback && tflite && bodyPix && (\n          <VirtualPhoto\n            sourcePlayback={sourcePlayback}\n            backgroundConfig={backgroundConfig}\n            segmentationConfig={segmentationConfig}\n            postProcessingConfig={postProcessingConfig}\n            bodyPix={bodyPix}\n            tflite={tflite}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default CheckTool;\n","import React from 'react'\n\nfunction DiagnosticHistory() {\n  return (\n    <>\n        <h4 style={{color: \"black\"}}>진단기록</h4>\n    </>\n  )\n}\n\nexport default DiagnosticHistory;","import React, { SyntheticEvent, useEffect, useRef, useState } from \"react\";\nimport { Socket, io } from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { SourcePlayback } from \"../core/helpers/sourceHelper\";\nimport { BackgroundConfig, backgroundImageUrls } from \"../core/helpers/backgroundHelper\";\nimport { SegmentationConfig } from \"../core/helpers/segmentationHelper\";\nimport { PostProcessingConfig } from \"../core/helpers/postProcessingHelper\";\nimport useBodyPix from \"../core/hooks/useBodyPix\";\nimport useTFLite from \"../core/hooks/useTFLite\";\nimport VirtualPhoto from \"../components/VirtualPhoto\";\nconst SOCKET_URL = \"http://localhost:5002\";\n\ninterface ClientPropsType {\n  meetingNumber: string;\n  isHost: string;\n  userName: string;\n}\n\nfunction Client({ meetingNumber, isHost, userName }: ClientPropsType) {\n\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>();\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\n    type: \"image\",\n    url: backgroundImageUrls[0],\n  });\n  const [segmentationConfig, setSegmentationConfig] =\n    useState<SegmentationConfig>({\n      model: \"meet\",\n      backend: \"wasm\",\n      inputResolution: \"160x96\",\n      pipeline: \"webgl2\",\n    });\n  const [postProcessingConfig, setPostProcessingConfig] =\n    useState<PostProcessingConfig>({\n      smoothSegmentationMask: true,\n      jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.1 },\n      coverage: [0.5, 0.75],\n      lightWrapping: 0.3,\n      blendMode: \"screen\",\n    });\n  const bodyPix = useBodyPix();\n  const { tflite, isSIMDSupported } = useTFLite(segmentationConfig);\n\n  const [myId, setMyId] = useState(\"\");\n  const [stream, setStream] = useState<MediaStream>();\n  const [socketData, setSocketData] = useState<Socket>();\n\n  const [caller, setCaller] = useState(\"\");\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [callerSignal, setCallerSignal] = useState<Peer.SignalData | string>(\n    \"\"\n  );\n  const [isLoading, setLoading] = useState(false);\n  const myVideo = useRef() as React.LegacyRef<HTMLVideoElement> &\n    React.MutableRefObject<HTMLVideoElement>;\n  const connection = useRef<Peer.Instance>();\n\n  let websocket: Socket | undefined = undefined;\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: false })\n      .then((stream) => {\n        setStream(stream);\n        console.log(stream);\n        myVideo.current.srcObject = stream;\n      });\n    if (websocket === undefined) {\n      websocket = io(SOCKET_URL, {\n        path: \"/socket.io\", // 서버 path와 일치시켜준다\n        transports: [\"websocket\"],\n      });\n\n      websocket.on(\"connect\", () => {\n        console.info(\"connect!\");\n        if (websocket !== undefined)\n          websocket.emit(\n            \"join\",\n            JSON.stringify({ room_id: meetingNumber, isHost, userName })\n          );\n      });\n\n      websocket.on(\"getid\", (id) => {\n        setMyId(id);\n      });\n\n      websocket.on(\"disconnect\", () => console.info(\"disconnect!\"));\n\n      websocket.on(\"caller\", (data) => {\n        setReceivingCall(true);\n        setCaller(data.from);\n        setCallerSignal(data.signal);\n        console.log(data);\n      });\n      setSocketData(websocket);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (receivingCall && caller && callerSignal && socketData) {\n      const peer = new Peer({\n        initiator: false,\n        trickle: false,\n        stream: stream,\n      });\n      peer.on(\"signal\", (data) => {\n        socketData.emit(\"answerCall\", { signal: data, to: caller });\n      });\n      peer.signal(callerSignal);\n      connection.current = peer;\n    }\n  }, [caller, callerSignal, receivingCall, socketData, stream]);\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    setSourcePlayback({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n    console.log(video);\n  }\n\n\n  return (\n    <div>\n      <div style={{ width: \"100%\", height: \"100%\"}}>\n        {isLoading && <progress></progress>}\n        <video\n          ref={myVideo}\n          style={{ width: \"100%\", height: \"100%\", visibility: \"hidden\", position: \"absolute\"}}\n          playsInline\n          autoPlay\n          muted\n          onLoadedData={handleVideoLoad}\n        />\n      </div>\n      {sourcePlayback && tflite && bodyPix && (\n          <VirtualPhoto\n            sourcePlayback={sourcePlayback}\n            backgroundConfig={backgroundConfig}\n            segmentationConfig={segmentationConfig}\n            postProcessingConfig={postProcessingConfig}\n            bodyPix={bodyPix}\n            tflite={tflite}\n          />\n        )}\n    </div>\n  );\n}\n\nexport default Client;\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\nimport { initArgs, ZoomMtg } from \"@zoomus/websdk\";\nimport CaptureList from \"./page/CaptureList\";\nimport ButtonGroup from \"./components/ButtonGroup\";\nimport RecordAndPrescription from \"./page/RecordAndPrescription\";\nimport CheckTool from \"./page/CheckTool\";\nimport DiagnosticHistory from \"./page/DiagnosticHistory\";\nimport { PhotoType, FileType } from \"./types/PrescriptionType\";\nimport Client from \"./page/Client\";\n\nZoomMtg.setZoomJSLib(\"https://source.zoom.us/2.4.5/lib\", \"/av\");\n\nZoomMtg.preLoadWasm();\nZoomMtg.prepareWebSDK();\n// loads language files, also passes any error messages to the ui\nZoomMtg.i18n.load(\"ko-KO\");\nZoomMtg.i18n.reload(\"ko-KO\");\n//ZoomMtg.i18n.load(\"en-US\");\n//ZoomMtg.i18n.reload(\"en-US\");\n\nfunction App() {\n  const [url, setUrl] = useState(\n    \"https://zoom.us/j/91314635094?pwd=bm5icWNwSTBjdEh6d05ZaUFkbVBJUT09\"\n  );\n  const [userName, setUserName] = useState(\"\");\n  const [isEnter, setIsEnter] = useState(false);\n  const [isHost, setIsHost] = useState(\"1\");\n\n  const [memo, setMemo] = useState<string>(\"\");\n  const [photoList, setPhotoList] = useState<PhotoType[]>([]);\n  const [checkedPhotoList, setCheckedPhotoList] = useState<PhotoType[]>([]);\n  const [uploadedPhotoList, setUploadedPhotoList] = useState<PhotoType[]>([]);\n  const [videoList, setVideoList] = useState<PhotoType[]>([]);\n\n  const [isModal, setIsModal] = useState(false);\n  const [src, setSrc] = useState(\"\");\n\n  const [currentPage, setCurrentPage] = useState(\"\");\n\n  useEffect(() => {\n    if (document) {\n      const url = document.location.href.split(\"?url=\")[1];\n      if (url) setUrl(url);\n    }\n  }, []);\n\n  const sdkKey = \"xPN1ctkMLTAqaWGsE7FDSonJSEOO8B0XtQf8\";\n  const meetingNumber = url.slice(\n    url.indexOf(\"/j/\") + 3,\n    url.indexOf(\"pwd=\") - 1\n  );\n  const leaveUrl = \"http://localhost:3000\";\n  const userEmail = \"\";\n  const passWord = url.slice(url.indexOf(\"pwd=\") + 4, url.length);\n  const sdkKeySecret = \"zaPNq6sYv9uKIUUI5wVCHGnqwnC8nG8F2p4U\";\n  const registrantToken = \"\";\n\n  const generateSDKSignature = () =>\n    ZoomMtg.generateSDKSignature({\n      sdkKey: sdkKey,\n      sdkSecret: sdkKeySecret,\n      meetingNumber: meetingNumber,\n      role: \"0\", //잠시 0으로 뒀고, 풀림에서 정보 받으면 isHost로 바꾸자.\n      success: () => console.info(\"generateSDKSignature success\"),\n      error: (e: any) => console.info(\"generateSDKSignature fail\", e),\n    });\n  function getSignature(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) {\n    event.preventDefault();\n\n    const root = document.getElementById(\"zmmtg-root\");\n\n    if (!root) return;\n    root.style.display = \"block\"; //줌 강제로 보이게 하는건인듯\n\n    const setting: typeof initArgs = {\n      leaveUrl: leaveUrl,\n      showMeetingHeader: true,\n      disableInvite: false,\n      disableCallOut: false,\n      disableRecord: false,\n      disableJoinAudio: false,\n      audioPanelAlwaysOpen: true,\n      showPureSharingContent: true,\n      isSupportAV: true,\n      isSupportChat: true,\n      isSupportQA: true,\n      isSupportCC: true,\n      isSupportPolling: true,\n      isSupportBreakout: true,\n      screenShare: true,\n      //rwcBackup: string,\n      videoDrag: true,\n      //sharingMode: string,\n      videoHeader: false,\n      isLockBottom: false,\n      isSupportNonverbal: true,\n      isShowJoiningErrorDialog: true,\n\n      inviteUrlFormat:\n        \"https://localhost:3000/?url=https://us04web.zoom.us/j/{0}?pwd={1}\",\n\n      meetingInfo: [\"participant\"],\n      disableVoIP: false,\n      disableReport: false,\n      disablePreview: false,\n      disableCORP: false,\n      onRetryCallback: true,\n      enableHD: true,\n      helper: \"what\",\n    };\n    const join_data = {\n      signature: generateSDKSignature(),\n      meetingNumber: meetingNumber,\n      userName: userName,\n      sdkKey: sdkKey,\n      userEmail: userEmail,\n      passWord: passWord,\n      tk: registrantToken,\n      success: (success: any) => {\n        console.log(\"성공\");\n        setIsEnter(true);\n      },\n\n      error: (error: any) => console.log(error),\n    };\n    ZoomMtg.init({\n      ...setting,\n      success: (success: any) => ZoomMtg.join(join_data),\n      error: (error: any) => console.log(error),\n    });\n  }\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Zoom Meeting SDK Sample React</h1>\n        <br />\n        <p>주소 창에 zoom url을 입력하면 해당 ZOOM으로 접근이 가능합니다.</p>\n        <br />\n        <p>예: http://localhost:3000/?url={url}</p>\n        <br />\n\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <input\n            type=\"radio\"\n            id=\"트레이너\"\n            name=\"drone\"\n            value=\"1\"\n            checked={isHost === \"1\"}\n            onClick={() => setIsHost(\"1\")}\n          />\n          <label htmlFor=\"트레이너\" style={{ padding: \"0 0 0 4px\" }}>\n            트레이너(호스트)\n          </label>\n          <div style={{ marginRight: 8 }} />\n          <input\n            type=\"radio\"\n            id=\"참가자\"\n            name=\"drone\"\n            value=\"0\"\n            checked={isHost === \"0\"}\n            onClick={() => setIsHost(\"0\")}\n          />\n          <label htmlFor=\"참가자\" style={{ padding: \"0 0 0 4px\" }}>\n            참가자\n          </label>\n        </div>\n        <h2>참가자 이름</h2>\n        <input\n          value={userName}\n          onChange={(e: any) => setUserName(e.target.value)}\n        />\n        <br />\n        <button onClick={getSignature}>Join Meeting</button>\n      </main>\n      {isHost === \"0\" && isEnter && (\n        <div\n          style={{\n            width: \"400px\",\n            position: \"absolute\",\n            top: 0,\n            zIndex: 1,\n            right: 0,\n          }}\n        >\n          <Client\n            meetingNumber={meetingNumber}\n            isHost={isHost}\n            userName={userName}\n          />\n        </div>\n      )}\n      {isHost === \"1\" && isEnter && (\n        <>\n          <div\n            id=\"pullim-page\"\n            style={{\n              width: \"400px\",\n              position: \"absolute\",\n              top: 0,\n              zIndex: 1,\n              right: 0,\n              display: \"none\",\n              height: \"100vh\",\n              backgroundColor: \"rgba(255,255,255)\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              borderRadius: \"1% 0 0 1%\",\n              overflow: \"hidden\",\n              // wordWrap: \"break-word\",\n            }}\n          >\n            {currentPage === \"CaptureList\" && (\n              <CaptureList\n                photoList={photoList}\n                setPhotoList={setPhotoList}\n                setIsModal={setIsModal}\n                setSrc={setSrc}\n              />\n            )}\n            {currentPage === \"RecordAndPrescription\" && (\n              <RecordAndPrescription\n                photoList={photoList}\n                uploadedPhotoList={uploadedPhotoList}\n                setUploadedPhotoList={setUploadedPhotoList}\n                videoList={videoList}\n                setVideoList={setVideoList}\n                memo={memo}\n                setMemo={setMemo}\n              />\n            )}\n            {currentPage === \"CheckTool\" && (\n              <CheckTool\n                checkedPhotoList={checkedPhotoList}\n                setCheckedPhotoList={setCheckedPhotoList}\n                isHost={isHost}\n                userName={userName}\n                meetingNumber={meetingNumber}\n              />\n            )}\n            {currentPage === \"DiagnosticHistory\" && <DiagnosticHistory />}\n          </div>\n          <ButtonGroup\n            setPhotoList={setPhotoList}\n            photoList={photoList}\n            setCurrentPage={setCurrentPage}\n          />\n          {isModal && (\n            <div\n              style={{\n                zIndex: 1,\n                position: \"absolute\",\n                width: \"1100px\",\n                top: \"10%\",\n                left: \"10%\",\n                border: \"2.5px solid orange\",\n              }}\n            >\n              <img\n                style={{ width: \"100%\" }}\n                onClick={() => {\n                  setIsModal(false);\n                }}\n                src={src}\n                alt=\"큰 이미지\"\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}