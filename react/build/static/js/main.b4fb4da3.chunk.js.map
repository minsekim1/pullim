{"version":3,"sources":["page/CaptureList.tsx","hook/useCapture.tsx","components/CaptureButton.tsx","components/CheckToolButton.tsx","components/CaptureListButton.tsx","components/RecordAndPrescriptionButton.tsx","hook/usePage.tsx","components/DiagnosticHistoryButton.tsx","components/ButtonGroup.tsx","page/RecordAndPrescription.tsx","core/helpers/segmentationHelper.ts","pipelines/canvas2d/canvas2dPipeline.ts","pipelines/helpers/webglHelper.ts","pipelines/webgl2/backgroundBlurStage.ts","pipelines/webgl2/resizingStage.ts","pipelines/webgl2/webgl2Pipeline.ts","pipelines/webgl2/softmaxStage.ts","pipelines/webgl2/loadSegmentationStage.ts","pipelines/webgl2/jointBilateralFilterStage.ts","pipelines/webgl2/backgroundImageStage.ts","core/hooks/useRenderingPipeline.ts","components/VirtualPhoto.tsx","core/helpers/backgroundHelper.ts","core/hooks/useBodyPix.ts","core/hooks/useTFLite.ts","page/CheckTool.tsx","page/DiagnosticHistory.tsx","page/Client.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CaptureList","Array","Function","photoList","setPhotoList","setIsModal","setSrc","photoRef","useRef","buttonRef","onDeleteHandler","e","i","array","filter","photo","photoIndex","photoRefArray","current","el","elIndex","buttonRefArray","console","log","useEffect","undefined","forEach","item","addEventListener","style","display","removeEventListener","color","width","padding","height","flexDirection","alignItems","overflowY","minHeight","length","map","ref","marginBottom","position","src","image","alt","onClick","bottom","right","background","borderRadius","useCapture","elObject","vedioRef","useState","isClick","setIsClick","useScreenshot","takeScreenshot","setImage","useCallback","now","Date","fileName","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","fetch","then","res","blob","file","File","type","name","clickCapture","tempRef","eltype","document","querySelector","elname","canvasRef","CaptureButton","id","fontSize","margin","CheckToolButton","onClickHandler","CaptureListButton","btnIdRef","RecordAndPrescriptionButton","usePage","setCurrentPage","pageName","catchPullimRef","getElementById","DiagnosticHistoryButton","ButtonGroup","Container","buttonGroupRef","zIndex","left","RecordAndPrescription","uploadedPhotoList","setUploadedPhotoList","videoList","setVideoList","memo","setMemo","readUploadedFileAsImage","inputFile","fileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","base64Data","result","readAsDataURL","handleUpload","event","files","target","all","from","fileContents","message","savePrescription","formData","FormData","entirePhotos","concat","alert","append","videoFile","axios","post","data","success","onChange","value","minWidth","multiple","className","videoFiles","videos","inputResolutions","getTFLiteModelFileName","model","inputResolution","Error","buildCanvas2dPipeline","sourcePlayback","backgroundConfig","segmentationConfig","canvas","bodyPix","tflite","addFrameEvent","ctx","getContext","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","createElement","postProcessingConfig","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","resizeSource","runBodyPixInference","runTFLiteInference","runPostProcessing","drawImage","htmlElement","imageData","getImageData","HEAPF32","segmentPerson","segmentation","putImageData","_runInference","person","shift","Math","max","backgroundExp","exp","personExp","globalCompositeOperation","smoothSegmentationMask","render","updatePostProcessingConfig","newPostProcessingConfig","cleanUp","glsl","String","raw","createPiplelineStageProgram","gl","vertexShader","fragmentShader","positionBuffer","texCoordBuffer","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","texCoordAttributeLocation","compileShader","shaderType","shaderSource","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createTexture","internalformat","minFilter","NEAREST","magFilter","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texStorage2D","x","y","format","dest","buf","createBuffer","PIXEL_PACK_BUFFER","bufferData","byteLength","STREAM_READ","readPixels","getBufferSubDataAsync","deleteBuffer","buffer","srcByteOffset","dstBuffer","dstOffset","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitAsync","deleteSync","WAIT_FAILED","getBufferSubData","requestAnimationFrame","test","clientWaitSync","TIMEOUT_EXPIRED","buildBackgroundBlurStage","personMaskTexture","blurPass","fragmentShaderSource","scale","outputWidth","outputHeight","texelWidth","texelHeight","FRAGMENT_SHADER","inputFrameLocation","getUniformLocation","personMaskLocation","texelSizeLocation","texture1","RGBA8","LINEAR","texture2","frameBuffer1","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","frameBuffer2","viewport","useProgram","uniform1i","activeTexture","TEXTURE1","uniform2f","drawArrays","TRIANGLE_STRIP","TEXTURE2","deleteFramebuffer","deleteTexture","deleteProgram","deleteShader","buildBlurPass","blendPass","vertexShaderSource","VERTEX_SHADER","blurredInputFrame","coverageLocation","updateCoverage","coverage","buildBlendPass","buildResizingStage","tfliteInputMemoryOffset","outputPixelCount","outputTexture","frameBuffer","outputPixels","Uint8Array","readPixelsAsync","RGBA","UNSIGNED_BYTE","tfliteIndex","outputIndex","buildWebGL2Pipeline","backgroundImage","frameWidth","frameHeight","preserveDrawingBuffer","vertexArray","createVertexArray","bindVertexArray","Float32Array","STATIC_DRAW","inputFrameTexture","segmentationTexture","resizingStage","loadSegmentationStage","tfliteOutputMemoryOffset","inputLocation","inputTexture","RG32F","texSubImage2D","RG","buildSoftmaxStage","R32F","RED","buildLoadSegmentationStage","jointBilateralFilterStage","segmentationMaskLocation","stepLocation","radiusLocation","offsetLocation","sigmaTexelLocation","sigmaColorLocation","updateSigmaSpace","sigmaSpace","step","sqrt","radius","offset","sigmaTexel","uniform1f","updateSigmaColor","sigmaColor","buildJointBilateralFilterStage","backgroundStage","outputRatio","backgroundScaleLocation","backgroundOffsetLocation","backgroundLocation","lightWrappingLocation","blendModeLocation","backgroundTexture","updateBackgroundImage","naturalWidth","naturalHeight","xOffset","yOffset","backgroundWidth","backgroundHeight","xScale","yScale","complete","updateLightWrapping","lightWrapping","updateBlendMode","blendMode","buildBackgroundImageStage","clearColor","clear","COLOR_BUFFER_BIT","TEXTURE0","texImage2D","jointBilateralFilter","backgroundImageStage","deleteVertexArray","useRenderingPipeline","pipeline","setPipeline","backgroundImageRef","fps","setFps","durations","setDurations","renderRequestId","shouldRender","previousTime","beginTime","eventCount","frameCount","frameDurations","newPipeline","beginFrame","endFrame","time","cancelAnimationFrame","VirtualPhoto","props","url","hidden","objectFit","backgroundImageUrls","imageName","process","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useTFLite","setTFLite","tfliteSIMD","setTFLiteSIMD","selectedTFLite","setSelectedTFLite","isSIMDSupported","setSIMDSupported","createTFLiteModule","createTFLiteSIMDModule","createdTFLiteSIMD","warn","loadTFLite","backend","newSelectedTFLite","modelFileName","modelResponse","arrayBuffer","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","_loadModel","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","loadTFLiteModel","CheckTool","checkedPhotoList","isHost","setCheckedPhotoList","userName","meetingNumber","setSourcePlayback","socketData","setSocketData","stream","setStream","myId","setMyId","callAccepted","setCallAccepted","isLoading","setLoading","myVideo","userVideo","connection","websocket","navigator","mediaDevices","getUserMedia","video","audio","srcObject","io","path","transports","on","info","emit","JSON","stringify","room_id","peer","Peer","initiator","trickle","signalData","signal","visibility","playsInline","autoPlay","muted","onLoadedData","videoWidth","videoHeight","checkedPhoto","DiagnosticHistory","Client","caller","setCaller","receivingCall","setReceivingCall","callerSignal","setCallerSignal","to","ZoomMtg","setZoomJSLib","preLoadWasm","prepareWebSDK","i18n","load","reload","App","setUrl","setUserName","isEnter","setIsEnter","setIsHost","isModal","currentPage","location","href","split","sdkKey","slice","indexOf","passWord","justifyContent","checked","htmlFor","marginRight","preventDefault","root","setting","leaveUrl","showMeetingHeader","disableInvite","disableCallOut","disableRecord","disableJoinAudio","audioPanelAlwaysOpen","showPureSharingContent","isSupportAV","isSupportChat","isSupportQA","isSupportCC","isSupportPolling","isSupportBreakout","screenShare","videoDrag","videoHeader","isLockBottom","isSupportNonverbal","isShowJoiningErrorDialog","inviteUrlFormat","meetingInfo","disableVoIP","disableReport","disablePreview","disableCORP","onRetryCallback","enableHD","helper","join_data","signature","generateSDKSignature","sdkSecret","role","error","userEmail","tk","init","join","top","backgroundColor","overflow","border","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.b4fb4da3.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nexport default function CaptureList(\r\n  { photoList, setPhotoList, setIsModal, setSrc }: any = { Array, Function }\r\n) {\r\n  const photoRef = useRef([]) as any;\r\n  const buttonRef = useRef([]) as any;\r\n\r\n  const onDeleteHandler = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n    i: number\r\n  ) => {\r\n    const array = photoList.filter(\r\n      (photo: string, photoIndex: number) => i !== photoIndex\r\n    );\r\n    const photoRefArray = photoRef.current.filter(\r\n      (el: HTMLElement, elIndex: number) => i !== elIndex\r\n    );\r\n    const buttonRefArray = buttonRef.current.filter(\r\n      (el: HTMLElement, elIndex: number) => i !== elIndex\r\n    );\r\n    console.log(\"삭제된 것\", i);\r\n    setPhotoList(array);\r\n    photoRef.current = photoRefArray;\r\n    buttonRef.current = buttonRefArray;\r\n  };\r\n  useEffect(() => {\r\n    if (photoRef!.current !== undefined && buttonRef.current !== undefined) {\r\n      photoList.forEach((item: string, i: number) => {\r\n        photoRef.current[i]?.addEventListener(\"mouseover\", () => {\r\n          buttonRef.current[i]!.style.display = \"block\";\r\n        });\r\n        photoRef.current[i]?.addEventListener(\"mouseleave\", () => {\r\n          buttonRef.current[i].style.display = \"none\";\r\n        });\r\n      });\r\n    }\r\n    return () => {\r\n      photoList.forEach((item: string, i: number) => {\r\n        if (\r\n          photoRef!.current !== undefined &&\r\n          buttonRef.current !== undefined\r\n        ) {\r\n          photoRef.current[i]?.removeEventListener(\"mouseover\", () => {\r\n            buttonRef.current[i]!.style.display = \"block\";\r\n          });\r\n          photoRef.current[i]?.removeEventListener(\"mouseleave\", () => {\r\n            buttonRef.current[i]!.style.display = \"none\";\r\n          });\r\n        }\r\n      });\r\n    };\r\n  }, [photoList]);\r\n  return (\r\n    <>\r\n      <h4 style={{color: \"black\"}}>저장된 화면캡처 화면</h4>\r\n      <div\r\n        style={{\r\n          width: \"90%\",\r\n          padding: \"10px\",\r\n          height: \"90vh\",\r\n          color: \"white\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        <div style={{ minHeight: \"500px\", width: \"100%\" }}>\r\n          {photoList.length !== 0 &&\r\n            photoList.map((photo: {image: string}, i: number) => (\r\n              <div\r\n                key={i}\r\n                ref={(el) => (photoRef.current[i] = el)}\r\n                style={{\r\n                  width: \"100%\",\r\n                  height: \"250px\",\r\n                  marginBottom: \"10px\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <img\r\n                  style={{ width: \"100%\", height: \"100%\" }}\r\n                  src={photo.image}\r\n                  alt=\"asa\"\r\n                  onClick={() =>{\r\n                    setIsModal(true);\r\n                    setSrc(photoList[i].image);\r\n                  }}\r\n                />\r\n                <button\r\n                  ref={(el) => (buttonRef.current[i] = el)}\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: 0,\r\n                    right: 2,\r\n                    width: \"30px\",\r\n                    background: \"red\",\r\n                    borderRadius: \"50px\",\r\n                    display: \"none\",\r\n                  }}\r\n                  onClick={(e) => onDeleteHandler(e, i)}\r\n                >\r\n                  x\r\n                </button>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n      <section style={{display: \"flex\", width: \"100%\"}}>\r\n        {/* {data && <div style={{width: \"300px\"}}><img src={`http://localhost:5001/images/202275/${data.filename}`} style={{width: \"100%\"}}/></div>} */}\r\n        {/* <button\r\n          onClick={savePhotoToLocal}\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"10vh\",\r\n            background: \"royalblue\",\r\n            borderRadius: \"5px\",\r\n            color: \"white\",\r\n            fontSize: \"11px\",\r\n          }}>\r\n          내컴퓨터에 저장\r\n        </button> */}\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useCallback } from \"react\";\r\nimport { useScreenshot } from \"use-screenshot-hook\";\r\nimport { UseScreenshotProps } from \"use-screenshot-hook/dist/types\";\r\nimport { PhotoType } from \"../types/PrescriptionType\";\r\n\r\ninterface ElObjectType {\r\n    eltype: \"className\" | \"id\";\r\n    elname: string \r\n}\r\n\r\nfunction useCapture(setPhotoList: Function, photoList: PhotoType[], elObject: ElObjectType) {\r\n  //ref는 고정적으로 값을 가지고 있음\r\n  const vedioRef = useRef();\r\n  const [isClick, setIsClick] = useState(false as any);\r\n  const { image, takeScreenshot } = useScreenshot({\r\n    ref: vedioRef,\r\n  } as UseScreenshotProps);\r\n\r\n  const clickCapture = () => {\r\n    //비디오 켰을 때 캡쳐 가능\r\n    let tempRef;\r\n    if(elObject.eltype===\"className\"){\r\n        tempRef = document.querySelector(`.${elObject.elname}`);\r\n    }else if(elObject.eltype===\"id\") {\r\n        tempRef = document.querySelector(`#${elObject.elname}`);\r\n    }\r\n    const canvasRef = tempRef\r\n    vedioRef.current = canvasRef as any;\r\n    console.log(vedioRef.current);\r\n    //클릭 완료!\r\n    setIsClick(true);\r\n  };\r\n  \r\n  //캡처 이미지 저장하는 함수\r\n  const setImage = useCallback(async(image: string) =>{\r\n    const now = new Date();\r\n    const fileName = `photo_${now.getFullYear()}${now.getMonth() + 1}${now.getDate()}${now.getHours()}${now.getMinutes()}${now.getSeconds()}.png`;\r\n\r\n    await fetch(image)\r\n      .then(res => res.blob())\r\n      .then(blob => {\r\n        const file = new File([blob], fileName,{ type: \"image/png\" });\r\n        const obj:PhotoType = {\r\n          image: image,\r\n          name: fileName,\r\n          file: file\r\n        }\r\n        setPhotoList([obj, ...photoList]);\r\n      });\r\n  },[photoList, setPhotoList])\r\n\r\n  //클릭했을 때 반응\r\n  useEffect(() => {\r\n    if (isClick) {\r\n      takeScreenshot();\r\n    }\r\n  }, [isClick, takeScreenshot]);\r\n\r\n  //클릭 후 이미지 저장 반응  \r\n  useEffect(() => {\r\n    if (isClick && image) {\r\n      setImage(image);\r\n      setIsClick(false);\r\n    }\r\n  }, [isClick, image, setImage]);\r\n\r\n  return {clickCapture, image};\r\n}\r\n\r\nexport default useCapture;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useCallback } from \"react\";\r\nimport { useScreenshot } from \"use-screenshot-hook\";\r\nimport { UseScreenshotProps } from \"use-screenshot-hook/dist/types\";\r\nimport useCapture from \"../hook/useCapture\";\r\nimport { PhotoType } from \"../types/PrescriptionType\";\r\n\r\n\r\nfunction CaptureButton({ setPhotoList, photoList }: any) {\r\n  const {clickCapture} = useCapture(setPhotoList, photoList, {eltype: \"className\", elname: 'single-main-container__canvas'});\r\n\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        id=\"screenshot_btn\"\r\n        style={{\r\n          width: \"100px\",\r\n          height: \"40px\",\r\n          background: \"royalblue\",\r\n          borderRadius: \"5px\",\r\n          color: \"white\",\r\n          fontSize: \"11px\",\r\n          margin: \"3px\"\r\n        }}\r\n        onClick={clickCapture}\r\n      >\r\n        화면캡처\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CaptureButton;\r\n","import React, { useState } from 'react'\r\n\r\nfunction CheckToolButton({onClickHandler}: any) {\r\n  return (\r\n    <button style={{\r\n      width: \"100px\",\r\n      height: \"40px\",\r\n      background: \"royalblue\",\r\n      borderRadius: \"5px\",\r\n      color: \"white\",\r\n      fontSize: \"11px\",\r\n      margin: \"3px\"\r\n    }}\r\n    onClick={onClickHandler('CheckTool')}>\r\n      검사툴\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default CheckToolButton","import React, { useRef, useState } from \"react\";\r\n\r\nfunction CaptureListButton({onClickHandler}: any) {\r\n  //ref는 고정적으로 값을 가지고 있음\r\n  const btnIdRef = useRef() as any;\r\n\r\n  return (\r\n      <button\r\n        ref={btnIdRef}\r\n        style={{\r\n          width: \"100px\",\r\n          height: \"40px\",\r\n          background: \"royalblue\",\r\n          borderRadius: \"5px\",\r\n          color: \"white\",\r\n          fontSize: \"11px\",\r\n          margin: \"3px\"\r\n        }}\r\n        onClick={onClickHandler('CaptureList')}\r\n      >\r\n        저장된 화면캡처 화면\r\n      </button>\r\n  );\r\n}\r\n\r\nexport default CaptureListButton;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction RecordAndPrescriptionButton({ onClickHandler }: any) {\r\n  return (\r\n    <button\r\n      onClick={onClickHandler(\"RecordAndPrescription\")}\r\n      style={{\r\n        width: \"100px\",\r\n        height: \"40px\",\r\n        background: \"royalblue\",\r\n        borderRadius: \"5px\",\r\n        color: \"white\",\r\n        fontSize: \"11px\",\r\n        margin: \"3px\",\r\n      }}\r\n    >\r\n      진단 기록 및 운동(VOD) 처방\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default RecordAndPrescriptionButton;\r\n","import React, { useState } from 'react'\r\n\r\n// setCurrentPage: 페이지를 잡아주는 useState 함수\r\nfunction usePage(setCurrentPage: Function) {\r\n    const [isClick, setIsClick] = useState(0 as number);\r\n\r\n    const onClickHandler = (pageName: string) => () => {\r\n      //풀림페이지 생성\r\n      const catchPullimRef = document.getElementById(\r\n        \"pullim-page\"\r\n      ) as HTMLDivElement;\r\n      if (isClick % 2 === 0) {\r\n        catchPullimRef.style.display = \"flex\";\r\n      } else {\r\n        catchPullimRef.style.display = \"none\";\r\n      }\r\n      setIsClick(isClick + 1); //클릭시 +1!\r\n      setCurrentPage(pageName);\r\n    };\r\n    return onClickHandler\r\n}\r\n\r\nexport default usePage;","import React from 'react';\r\n\r\n\r\nfunction DiagnosticHistoryButton({onClickHandler}: any) {\r\n  return (\r\n    <button style={{\r\n        width: \"100px\",\r\n        height: \"40px\",\r\n        background: \"royalblue\",\r\n        borderRadius: \"5px\",\r\n        color: \"white\",\r\n        fontSize: \"11px\",\r\n        margin: \"3px\"\r\n      }} onClick={onClickHandler('DiagnosticHistory')}>진단기록</button>\r\n  )\r\n}\r\n\r\nexport default DiagnosticHistoryButton;","import React, { useEffect, useRef } from \"react\";\r\nimport CaptureButton from \"./CaptureButton\";\r\nimport CheckToolButton from \"./CheckToolButton\";\r\nimport CaptureListButton from \"./CaptureListButton\";\r\nimport RecordAndPrescriptionButton from \"./RecordAndPrescriptionButton\";\r\nimport usePage from \"../hook/usePage\";\r\nimport DiagnosticHistoryButton from \"./DiagnosticHistoryButton\";\r\n\r\nfunction ButtonGroup(\r\n  { setPhotoList, photoList, setCurrentPage }: any = { Function, Array }\r\n) {\r\n  const onClickHandler = usePage(setCurrentPage);\r\n  const Container = useRef<any>();\r\n  const buttonGroupRef = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    if (buttonGroupRef.current !==undefined && Container.current !== undefined){\r\n      Container.current.addEventListener(\"mouseover\", () => {\r\n        buttonGroupRef.current.style.display = \"flex\";\r\n      });\r\n      Container.current.addEventListener(\"mouseleave\", () => {\r\n        buttonGroupRef.current.style.display = \"none\";\r\n      });\r\n    }\r\n    return () => {\r\n      if(buttonGroupRef!.current !==undefined && Container!.current !== undefined){\r\n        Container!.current.removeEventListener(\"mouseover\", () => {\r\n          buttonGroupRef!.current.style.display = \"flex\";\r\n        });\r\n        Container!.current.removeEventListener(\"mouseleave\", () => {\r\n          buttonGroupRef!.current.style.display = \"none\";\r\n        });\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={Container}\r\n      style={{\r\n        position: \"absolute\",\r\n        bottom: \"15%\",\r\n        zIndex: 100,\r\n        left: \"1%\",\r\n        width: \"150px\",\r\n        height: \"70%\",\r\n        minHeight: \"180px\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        ref={buttonGroupRef}\r\n        style={{\r\n          display: \"none\",\r\n          flexDirection: \"column\",\r\n          width: \"300px\"\r\n        }}\r\n      >\r\n        <CaptureListButton onClickHandler={onClickHandler} />\r\n        <CaptureButton setPhotoList={setPhotoList} photoList={photoList} />\r\n        <CheckToolButton onClickHandler={onClickHandler} />\r\n        <RecordAndPrescriptionButton onClickHandler={onClickHandler} />\r\n        <DiagnosticHistoryButton onClickHandler={onClickHandler}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonGroup;\r\n","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { PhotoType, FileType } from \"../types/PrescriptionType\";\r\n\r\ninterface RecordAndPrescriptionPropsType {\r\n  photoList: PhotoType[];\r\n  uploadedPhotoList: PhotoType[];\r\n  setUploadedPhotoList: Function;\r\n  videoList: FileType[];\r\n  setVideoList: Function;\r\n  memo: string;\r\n  setMemo: Function\r\n}\r\n\r\nfunction RecordAndPrescription({\r\n  photoList,\r\n  uploadedPhotoList,\r\n  setUploadedPhotoList,\r\n  videoList,\r\n  setVideoList,\r\n  memo,\r\n  setMemo\r\n}: RecordAndPrescriptionPropsType) {\r\n\r\n  const changeMemo = (e: React.ChangeEvent<HTMLTextAreaElement>) =>{\r\n    setMemo(e.target.value);\r\n  }\r\n  \r\n  const readUploadedFileAsImage = (inputFile: File, i: number) => {\r\n    const fileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // 에러날 시\r\n      fileReader.onerror = () => {\r\n        fileReader.abort();\r\n        reject(new DOMException(\"Problem parsing input file.\"));\r\n      };\r\n      // 사진 잘 올라갈 시\r\n      fileReader.onload = () => {\r\n        const base64Data = fileReader.result;\r\n        const fileName = inputFile.name;\r\n\r\n        const obj = {\r\n          image: base64Data,\r\n          name: fileName,\r\n          file: inputFile,\r\n        };\r\n        resolve(obj);\r\n      };\r\n      fileReader.readAsDataURL(inputFile);\r\n    });\r\n  };\r\n\r\n  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = event.target.files!;\r\n    try {\r\n      const fileContents = await Promise.all(\r\n        Array.from(files).map((file, i) => readUploadedFileAsImage(file, i))\r\n      );\r\n      setUploadedPhotoList(fileContents, ...uploadedPhotoList);\r\n    } catch (e: any) {\r\n      console.log(e.message);\r\n    }\r\n  };\r\n\r\n  const savePrescription = async () => {\r\n    let formData = new FormData();\r\n    const entirePhotos = photoList.concat(uploadedPhotoList);\r\n    if(memo===''){\r\n      return alert('메모를 입력해주세요.');\r\n    }\r\n    formData.append('memo', memo);\r\n    entirePhotos.forEach((photo: { file: File }, i: number) => {\r\n      const { file } = photo;\r\n      // const data = new Blob([photo], { type: \"image/png\" });\r\n      // formData.append(\"photos\", data, \"photo\" + i);\r\n      formData.append(\"photos\", file);\r\n    });\r\n    videoList.forEach((videoFile:{ file: File}) =>{\r\n      const {file} = videoFile;\r\n      formData.append(\"videos\", file);\r\n    });\r\n    const response = await axios\r\n      .post(\"/photo\", formData)\r\n      .then((res) => res.data);\r\n    if (response.success) {\r\n      alert(\"저장 완료!\");\r\n    }\r\n    // setData(response.photo);\r\n  };\r\n\r\n  const videoUploadHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) {\r\n      const videoFiles = event.target.files;\r\n      const videos = Array.from(videoFiles).map((videoFile): FileType => ({name: videoFile.name, file: videoFile}));\r\n      setVideoList(videos);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <h4 style={{ color: \"black\" }}>진단 기록 및 운동(VOD) 처방</h4>\r\n      <div\r\n        style={{\r\n          margin: \"5px\",\r\n          padding: \"0px 10px 0px 10px\",\r\n          width: \"90%\",\r\n          height: \"90vh\",\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        <h4>1. 메모</h4>\r\n        <textarea\r\n          onChange={changeMemo}\r\n          value={memo}\r\n          style={{\r\n            minWidth: \"100%\",\r\n            minHeight: \"200px\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n            borderRadius: \"3%\",\r\n          }}\r\n        ></textarea>\r\n        <h4>2. 사진 업로드</h4>\r\n        <input\r\n          type=\"file\"\r\n          id=\"photoSelector\"\r\n          onChange={handleUpload}\r\n          multiple\r\n          style={{ width: \"100%\" }}\r\n        />\r\n        <h5>- 업로드한 사진(여러 사진 업로드 가능)</h5>\r\n        <div className=\"photosContainer\" style={{ width: \"100%\" }}>\r\n          {uploadedPhotoList.length !== 0 &&\r\n            uploadedPhotoList.map((photo: any, i: number) => (\r\n              <div key={i} className=\"photo\" style={{ width: \"100%\" }}>\r\n                <img\r\n                  style={{ width: \"100%\" }}\r\n                  src={photo.image}\r\n                  alt={photo.name}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <h5>- 캡처한 사진</h5>\r\n        <div className=\"photosContainer\" style={{ width: \"100%\" }}>\r\n          {photoList.length !== 0 &&\r\n            photoList.map((photo: any, i: number) => (\r\n              <div key={i} className=\"photo\" style={{ width: \"100%\" }}>\r\n                <img\r\n                  style={{ width: \"100%\" }}\r\n                  src={photo.image}\r\n                  alt={photo.name}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <h4>3. 운동 VOD처방하기</h4>\r\n        <input\r\n          type=\"file\"\r\n          id=\"videoSelector\"\r\n          onChange={videoUploadHandler}\r\n          multiple\r\n          style={{ width: \"100%\" }}\r\n        />\r\n        <div></div>\r\n      </div>\r\n      <button\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"10vh\",\r\n          background: \"red\",\r\n          borderRadius: \"5px\",\r\n          color: \"white\",\r\n          fontSize: \"11px\",\r\n        }}\r\n        onClick={savePrescription}\r\n      >\r\n        처방전 저장\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RecordAndPrescription;\r\n","export type SegmentationModel = 'bodyPix' | 'meet' | 'mlkit'\r\nexport type SegmentationBackend = 'webgl' | 'wasm' | 'wasmSimd'\r\nexport type InputResolution = '640x360' | '256x256' | '256x144' | '160x96'\r\n\r\nexport const inputResolutions: {\r\n  [resolution in InputResolution]: [number, number]\r\n} = {\r\n  '640x360': [640, 360],\r\n  '256x256': [256, 256],\r\n  '256x144': [256, 144],\r\n  '160x96': [160, 96],\r\n}\r\n\r\nexport type PipelineName = 'canvas2dCpu' | 'webgl2'\r\n\r\nexport type SegmentationConfig = {\r\n  model: SegmentationModel\r\n  backend: SegmentationBackend\r\n  inputResolution: InputResolution\r\n  pipeline: PipelineName\r\n}\r\n\r\nexport function getTFLiteModelFileName(\r\n  model: SegmentationModel,\r\n  inputResolution: InputResolution\r\n) {\r\n  switch (model) {\r\n    case 'meet':\r\n      return inputResolution === '256x144' ? 'segm_full_v679' : 'segm_lite_v681'\r\n\r\n    case 'mlkit':\r\n      return 'selfiesegmentation_mlkit-256x256-2021_01_19-v1215.f16'\r\n\r\n    default:\r\n      throw new Error(`No TFLite file for this segmentation model: ${model}`)\r\n  }\r\n}\r\n","import { BodyPix } from '@tensorflow-models/body-pix'\r\nimport { BackgroundConfig } from '../../core/helpers/backgroundHelper'\r\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\r\nimport {\r\n  inputResolutions,\r\n  SegmentationConfig,\r\n} from '../../core/helpers/segmentationHelper'\r\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\r\nimport { TFLite } from '../../core/hooks/useTFLite'\r\n\r\nexport function buildCanvas2dPipeline(\r\n  sourcePlayback: SourcePlayback,\r\n  backgroundConfig: BackgroundConfig,\r\n  segmentationConfig: SegmentationConfig,\r\n  canvas: HTMLCanvasElement,\r\n  bodyPix: BodyPix,\r\n  tflite: TFLite,\r\n  addFrameEvent: () => void\r\n) {\r\n  const ctx = canvas.getContext('2d')!\r\n\r\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\r\n    segmentationConfig.inputResolution\r\n  ]\r\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\r\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\r\n  const segmentationMaskCanvas = document.createElement('canvas')\r\n  segmentationMaskCanvas.width = segmentationWidth\r\n  segmentationMaskCanvas.height = segmentationHeight\r\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\r\n\r\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\r\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\r\n\r\n  let postProcessingConfig: PostProcessingConfig\r\n\r\n  async function render() {\r\n    if (backgroundConfig.type !== 'none') {\r\n      resizeSource()\r\n    }\r\n\r\n    addFrameEvent()\r\n\r\n    if (backgroundConfig.type !== 'none') {\r\n      if (segmentationConfig.model === 'bodyPix') {\r\n        await runBodyPixInference()\r\n      } else {\r\n        runTFLiteInference()\r\n      }\r\n    }\r\n\r\n    addFrameEvent()\r\n\r\n    runPostProcessing()\r\n  }\r\n\r\n  function updatePostProcessingConfig(\r\n    newPostProcessingConfig: PostProcessingConfig\r\n  ) {\r\n    postProcessingConfig = newPostProcessingConfig\r\n  }\r\n\r\n  function cleanUp() {\r\n    // Nothing to clean up in this rendering pipeline\r\n  }\r\n\r\n  function resizeSource() {\r\n    segmentationMaskCtx.drawImage(\r\n      sourcePlayback.htmlElement,\r\n      0,\r\n      0,\r\n      sourcePlayback.width,\r\n      sourcePlayback.height,\r\n      0,\r\n      0,\r\n      segmentationWidth,\r\n      segmentationHeight\r\n    )\r\n\r\n    if (\r\n      segmentationConfig.model === 'meet' ||\r\n      segmentationConfig.model === 'mlkit'\r\n    ) {\r\n      const imageData = segmentationMaskCtx.getImageData(\r\n        0,\r\n        0,\r\n        segmentationWidth,\r\n        segmentationHeight\r\n      )\r\n\r\n      for (let i = 0; i < segmentationPixelCount; i++) {\r\n        tflite.HEAPF32[inputMemoryOffset + i * 3] = imageData.data[i * 4] / 255\r\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 1] =\r\n          imageData.data[i * 4 + 1] / 255\r\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 2] =\r\n          imageData.data[i * 4 + 2] / 255\r\n      }\r\n    }\r\n  }\r\n\r\n  async function runBodyPixInference() {\r\n    const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\r\n    for (let i = 0; i < segmentationPixelCount; i++) {\r\n      // Sets only the alpha component of each pixel\r\n      segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\r\n    }\r\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\r\n  }\r\n\r\n  function runTFLiteInference() {\r\n    tflite._runInference()\r\n\r\n    for (let i = 0; i < segmentationPixelCount; i++) {\r\n      if (segmentationConfig.model === 'meet') {\r\n        const background = tflite.HEAPF32[outputMemoryOffset + i * 2]\r\n        const person = tflite.HEAPF32[outputMemoryOffset + i * 2 + 1]\r\n        const shift = Math.max(background, person)\r\n        const backgroundExp = Math.exp(background - shift)\r\n        const personExp = Math.exp(person - shift)\r\n\r\n        // Sets only the alpha component of each pixel\r\n        segmentationMask.data[i * 4 + 3] =\r\n          (255 * personExp) / (backgroundExp + personExp) // softmax\r\n      } else if (segmentationConfig.model === 'mlkit') {\r\n        const person = tflite.HEAPF32[outputMemoryOffset + i]\r\n        segmentationMask.data[i * 4 + 3] = 255 * person\r\n      }\r\n    }\r\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\r\n  }\r\n\r\n  function runPostProcessing() {\r\n    ctx.globalCompositeOperation = 'copy'\r\n    ctx.filter = 'none'\r\n\r\n    if (postProcessingConfig?.smoothSegmentationMask) {\r\n      if (backgroundConfig.type === 'blur') {\r\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\r\n      } else if (backgroundConfig.type === 'image') {\r\n        ctx.filter = 'blur(4px)' // FIXME Does not work on Safari\r\n      }\r\n    }\r\n\r\n    if (backgroundConfig.type !== 'none') {\r\n      drawSegmentationMask()\r\n      ctx.globalCompositeOperation = 'source-in'\r\n      ctx.filter = 'none'\r\n    }\r\n\r\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\r\n\r\n    if (backgroundConfig.type === 'blur') {\r\n      blurBackground()\r\n    }\r\n  }\r\n\r\n  function drawSegmentationMask() {\r\n    ctx.drawImage(\r\n      segmentationMaskCanvas,\r\n      0,\r\n      0,\r\n      segmentationWidth,\r\n      segmentationHeight,\r\n      0,\r\n      0,\r\n      sourcePlayback.width,\r\n      sourcePlayback.height\r\n    )\r\n  }\r\n\r\n  function blurBackground() {\r\n    ctx.globalCompositeOperation = 'destination-over'\r\n    ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\r\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\r\n  }\r\n\r\n  return { render, updatePostProcessingConfig, cleanUp }\r\n}\r\n","/**\r\n * Use it along with boyswan.glsl-literal VSCode extension\r\n * to get GLSL syntax highlighting.\r\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\r\n *\r\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\r\n * to be installed as well.\r\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\r\n */\r\nexport const glsl = String.raw\r\n\r\nexport function createPiplelineStageProgram(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  fragmentShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer\r\n) {\r\n  const program = createProgram(gl, vertexShader, fragmentShader)\r\n\r\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\r\n  gl.enableVertexAttribArray(positionAttributeLocation)\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\r\n\r\n  const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord')\r\n  gl.enableVertexAttribArray(texCoordAttributeLocation)\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\r\n  gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0)\r\n\r\n  return program\r\n}\r\n\r\nexport function createProgram(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  fragmentShader: WebGLShader\r\n) {\r\n  const program = gl.createProgram()!\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    throw new Error(\r\n      `Could not link WebGL program: ${gl.getProgramInfoLog(program)}`\r\n    )\r\n  }\r\n  return program\r\n}\r\n\r\nexport function compileShader(\r\n  gl: WebGL2RenderingContext,\r\n  shaderType: number,\r\n  shaderSource: string\r\n) {\r\n  const shader = gl.createShader(shaderType)!\r\n  gl.shaderSource(shader, shaderSource)\r\n  gl.compileShader(shader)\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`)\r\n  }\r\n  return shader\r\n}\r\n\r\nexport function createTexture(\r\n  gl: WebGL2RenderingContext,\r\n  internalformat: number,\r\n  width: number,\r\n  height: number,\r\n  minFilter = gl.NEAREST,\r\n  magFilter = gl.NEAREST\r\n) {\r\n  const texture = gl.createTexture()\r\n  gl.bindTexture(gl.TEXTURE_2D, texture)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\r\n  gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height)\r\n  return texture\r\n}\r\n\r\nexport async function readPixelsAsync(\r\n  gl: WebGL2RenderingContext,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  format: number,\r\n  type: number,\r\n  dest: ArrayBufferView\r\n) {\r\n  const buf = gl.createBuffer()!\r\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf)\r\n  gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ)\r\n  gl.readPixels(x, y, width, height, format, type, 0)\r\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null)\r\n\r\n  await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest)\r\n\r\n  gl.deleteBuffer(buf)\r\n  return dest\r\n}\r\n\r\nasync function getBufferSubDataAsync(\r\n  gl: WebGL2RenderingContext,\r\n  target: number,\r\n  buffer: WebGLBuffer,\r\n  srcByteOffset: number,\r\n  dstBuffer: ArrayBufferView,\r\n  dstOffset?: number,\r\n  length?: number\r\n) {\r\n  const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!\r\n  gl.flush()\r\n  const res = await clientWaitAsync(gl, sync)\r\n  gl.deleteSync(sync)\r\n\r\n  if (res !== gl.WAIT_FAILED) {\r\n    gl.bindBuffer(target, buffer)\r\n    gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length)\r\n    gl.bindBuffer(target, null)\r\n  }\r\n}\r\n\r\nfunction clientWaitAsync(gl: WebGL2RenderingContext, sync: WebGLSync) {\r\n  return new Promise<number>((resolve) => {\r\n    function test() {\r\n      const res = gl.clientWaitSync(sync, 0, 0)\r\n      if (res === gl.WAIT_FAILED) {\r\n        resolve(res)\r\n        return\r\n      }\r\n      if (res === gl.TIMEOUT_EXPIRED) {\r\n        requestAnimationFrame(test)\r\n        return\r\n      }\r\n      resolve(res)\r\n    }\r\n    requestAnimationFrame(test)\r\n  })\r\n}\r\n","import {\r\n  compileShader,\r\n  createPiplelineStageProgram,\r\n  createTexture,\r\n  glsl,\r\n} from '../helpers/webglHelper'\r\n\r\nexport type BackgroundBlurStage = {\r\n  render(): void\r\n  updateCoverage(coverage: [number, number]): void\r\n  cleanUp(): void\r\n}\r\n\r\nexport function buildBackgroundBlurStage(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  personMaskTexture: WebGLTexture,\r\n  canvas: HTMLCanvasElement\r\n): BackgroundBlurStage {\r\n  const blurPass = buildBlurPass(\r\n    gl,\r\n    vertexShader,\r\n    positionBuffer,\r\n    texCoordBuffer,\r\n    personMaskTexture,\r\n    canvas\r\n  )\r\n  const blendPass = buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas)\r\n\r\n  function render() {\r\n    blurPass.render()\r\n    blendPass.render()\r\n  }\r\n\r\n  function updateCoverage(coverage: [number, number]) {\r\n    blendPass.updateCoverage(coverage)\r\n  }\r\n\r\n  function cleanUp() {\r\n    blendPass.cleanUp()\r\n    blurPass.cleanUp()\r\n  }\r\n\r\n  return {\r\n    render,\r\n    updateCoverage,\r\n    cleanUp,\r\n  }\r\n}\r\n\r\nfunction buildBlurPass(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  personMaskTexture: WebGLTexture,\r\n  canvas: HTMLCanvasElement\r\n) {\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputFrame;\r\n    uniform sampler2D u_personMask;\r\n    uniform vec2 u_texelSize;\r\n\r\n    in vec2 v_texCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    const float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);\r\n    const float weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,\r\n      0.0540540541, 0.0162162162);\r\n\r\n    void main() {\r\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\r\n      float personMask = texture(u_personMask, v_texCoord).a;\r\n\r\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\r\n\r\n      for (int i = 1; i < 5; i++) {\r\n        vec2 offset = vec2(offset[i]) * u_texelSize;\r\n\r\n        vec2 texCoord = v_texCoord + offset;\r\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\r\n          (1.0 - texture(u_personMask, texCoord).a);\r\n\r\n        texCoord = v_texCoord - offset;\r\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\r\n          (1.0 - texture(u_personMask, texCoord).a);\r\n      }\r\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\r\n    }\r\n  `\r\n\r\n  const scale = 0.5\r\n  const outputWidth = canvas.width * scale\r\n  const outputHeight = canvas.height * scale\r\n  const texelWidth = 1 / outputWidth\r\n  const texelHeight = 1 / outputHeight\r\n\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\r\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\r\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\r\n  const texture1 = createTexture(\r\n    gl,\r\n    gl.RGBA8,\r\n    outputWidth,\r\n    outputHeight,\r\n    gl.NEAREST,\r\n    gl.LINEAR\r\n  )\r\n  const texture2 = createTexture(\r\n    gl,\r\n    gl.RGBA8,\r\n    outputWidth,\r\n    outputHeight,\r\n    gl.NEAREST,\r\n    gl.LINEAR\r\n  )\r\n\r\n  const frameBuffer1 = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\r\n  gl.framebufferTexture2D(\r\n    gl.FRAMEBUFFER,\r\n    gl.COLOR_ATTACHMENT0,\r\n    gl.TEXTURE_2D,\r\n    texture1,\r\n    0\r\n  )\r\n\r\n  const frameBuffer2 = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\r\n  gl.framebufferTexture2D(\r\n    gl.FRAMEBUFFER,\r\n    gl.COLOR_ATTACHMENT0,\r\n    gl.TEXTURE_2D,\r\n    texture2,\r\n    0\r\n  )\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform1i(personMaskLocation, 1)\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, outputWidth, outputHeight)\r\n    gl.useProgram(program)\r\n    gl.uniform1i(inputFrameLocation, 0)\r\n    gl.activeTexture(gl.TEXTURE1)\r\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      gl.uniform2f(texelSizeLocation, 0, texelHeight)\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n\r\n      gl.activeTexture(gl.TEXTURE2)\r\n      gl.bindTexture(gl.TEXTURE_2D, texture1)\r\n      gl.uniform1i(inputFrameLocation, 2)\r\n\r\n      gl.uniform2f(texelSizeLocation, texelWidth, 0)\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n\r\n      gl.bindTexture(gl.TEXTURE_2D, texture2)\r\n    }\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteFramebuffer(frameBuffer2)\r\n    gl.deleteFramebuffer(frameBuffer1)\r\n    gl.deleteTexture(texture2)\r\n    gl.deleteTexture(texture1)\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n  }\r\n\r\n  return {\r\n    render,\r\n    cleanUp,\r\n  }\r\n}\r\n\r\nfunction buildBlendPass(\r\n  gl: WebGL2RenderingContext,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  canvas: HTMLCanvasElement\r\n) {\r\n  const vertexShaderSource = glsl`#version 300 es\r\n\r\n    in vec2 a_position;\r\n    in vec2 a_texCoord;\r\n\r\n    out vec2 v_texCoord;\r\n\r\n    void main() {\r\n      // Flipping Y is required when rendering to canvas\r\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\r\n      v_texCoord = a_texCoord;\r\n    }\r\n  `\r\n\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputFrame;\r\n    uniform sampler2D u_personMask;\r\n    uniform sampler2D u_blurredInputFrame;\r\n    uniform vec2 u_coverage;\r\n\r\n    in vec2 v_texCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main() {\r\n      vec3 color = texture(u_inputFrame, v_texCoord).rgb;\r\n      vec3 blurredColor = texture(u_blurredInputFrame, v_texCoord).rgb;\r\n      float personMask = texture(u_personMask, v_texCoord).a;\r\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\r\n      outColor = vec4(mix(blurredColor, color, personMask), 1.0);\r\n    }\r\n  `\r\n\r\n  const { width: outputWidth, height: outputHeight } = canvas\r\n\r\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\r\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\r\n  const blurredInputFrame = gl.getUniformLocation(\r\n    program,\r\n    'u_blurredInputFrame'\r\n  )\r\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform1i(inputFrameLocation, 0)\r\n  gl.uniform1i(personMaskLocation, 1)\r\n  gl.uniform1i(blurredInputFrame, 2)\r\n  gl.uniform2f(coverageLocation, 0, 1)\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, outputWidth, outputHeight)\r\n    gl.useProgram(program)\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n\r\n  function updateCoverage(coverage: [number, number]) {\r\n    gl.useProgram(program)\r\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n    gl.deleteShader(vertexShader)\r\n  }\r\n\r\n  return {\r\n    render,\r\n    updateCoverage,\r\n    cleanUp,\r\n  }\r\n}\r\n","import {\r\n  inputResolutions,\r\n  SegmentationConfig,\r\n} from '../../core/helpers/segmentationHelper'\r\nimport { TFLite } from '../../core/hooks/useTFLite'\r\nimport {\r\n  compileShader,\r\n  createPiplelineStageProgram,\r\n  createTexture,\r\n  glsl,\r\n  readPixelsAsync,\r\n} from '../helpers/webglHelper'\r\n\r\nexport function buildResizingStage(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  segmentationConfig: SegmentationConfig,\r\n  tflite: TFLite\r\n) {\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputFrame;\r\n\r\n    in vec2 v_texCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main() {\r\n      outColor = texture(u_inputFrame, v_texCoord);\r\n    }\r\n  `\r\n\r\n  // TFLite memory will be accessed as float32\r\n  const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4\r\n\r\n  const [outputWidth, outputHeight] = inputResolutions[\r\n    segmentationConfig.inputResolution\r\n  ]\r\n  const outputPixelCount = outputWidth * outputHeight\r\n\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\r\n  const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight)\r\n\r\n  const frameBuffer = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n  gl.framebufferTexture2D(\r\n    gl.FRAMEBUFFER,\r\n    gl.COLOR_ATTACHMENT0,\r\n    gl.TEXTURE_2D,\r\n    outputTexture,\r\n    0\r\n  )\r\n  const outputPixels = new Uint8Array(outputPixelCount * 4)\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform1i(inputFrameLocation, 0)\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, outputWidth, outputHeight)\r\n    gl.useProgram(program)\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n\r\n    // Downloads pixels asynchronously from GPU while rendering the current frame\r\n    readPixelsAsync(\r\n      gl,\r\n      0,\r\n      0,\r\n      outputWidth,\r\n      outputHeight,\r\n      gl.RGBA,\r\n      gl.UNSIGNED_BYTE,\r\n      outputPixels\r\n    )\r\n\r\n    for (let i = 0; i < outputPixelCount; i++) {\r\n      const tfliteIndex = tfliteInputMemoryOffset + i * 3\r\n      const outputIndex = i * 4\r\n      tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255\r\n      tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255\r\n      tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255\r\n    }\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteFramebuffer(frameBuffer)\r\n    gl.deleteTexture(outputTexture)\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n  }\r\n\r\n  return { render, cleanUp }\r\n}\r\n","import { BackgroundConfig } from '../../core/helpers/backgroundHelper'\r\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\r\nimport {\r\n  inputResolutions,\r\n  SegmentationConfig,\r\n} from '../../core/helpers/segmentationHelper'\r\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\r\nimport { TFLite } from '../../core/hooks/useTFLite'\r\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\r\nimport {\r\n  BackgroundBlurStage,\r\n  buildBackgroundBlurStage,\r\n} from './backgroundBlurStage'\r\nimport {\r\n  BackgroundImageStage,\r\n  buildBackgroundImageStage,\r\n} from './backgroundImageStage'\r\nimport { buildJointBilateralFilterStage } from './jointBilateralFilterStage'\r\nimport { buildLoadSegmentationStage } from './loadSegmentationStage'\r\nimport { buildResizingStage } from './resizingStage'\r\nimport { buildSoftmaxStage } from './softmaxStage'\r\n\r\nexport function buildWebGL2Pipeline(\r\n  sourcePlayback: SourcePlayback,\r\n  backgroundImage: HTMLImageElement | null,\r\n  backgroundConfig: BackgroundConfig,\r\n  segmentationConfig: SegmentationConfig,\r\n  canvas: HTMLCanvasElement,\r\n  tflite: TFLite,\r\n  addFrameEvent: () => void\r\n) {\r\n  const vertexShaderSource = glsl`#version 300 es\r\n\r\n    in vec2 a_position;\r\n    in vec2 a_texCoord;\r\n\r\n    out vec2 v_texCoord;\r\n\r\n    void main() {\r\n      gl_Position = vec4(a_position, 0.0, 1.0);\r\n      v_texCoord = a_texCoord;\r\n    }\r\n  `\r\n\r\n  const { width: frameWidth, height: frameHeight } = sourcePlayback\r\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\r\n    segmentationConfig.inputResolution\r\n  ]\r\n  //preserveDrawingBuffer옵션은 버퍼에 데이터를 남기도록 하느 것이다. 사양을 위해서 원래는 비우는 것 같음.\r\n  const gl = canvas.getContext('webgl2', {preserveDrawingBuffer: true})!\r\n\r\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\r\n\r\n  const vertexArray = gl.createVertexArray()\r\n  gl.bindVertexArray(vertexArray)\r\n\r\n  const positionBuffer = gl.createBuffer()!\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\r\n    gl.STATIC_DRAW\r\n  )\r\n\r\n  const texCoordBuffer = gl.createBuffer()!\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\r\n    gl.STATIC_DRAW\r\n  )\r\n\r\n  // We don't use texStorage2D here because texImage2D seems faster\r\n  // to upload video texture than texSubImage2D even though the latter\r\n  // is supposed to be the recommended way:\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\r\n  const inputFrameTexture = gl.createTexture()\r\n  gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\r\n\r\n  // TODO Rename segmentation and person mask to be more specific\r\n  const segmentationTexture = createTexture(\r\n    gl,\r\n    gl.RGBA8,\r\n    segmentationWidth,\r\n    segmentationHeight\r\n  )!\r\n  const personMaskTexture = createTexture(\r\n    gl,\r\n    gl.RGBA8,\r\n    frameWidth,\r\n    frameHeight\r\n  )!\r\n\r\n  const resizingStage = buildResizingStage(\r\n    gl,\r\n    vertexShader,\r\n    positionBuffer,\r\n    texCoordBuffer,\r\n    segmentationConfig,\r\n    tflite\r\n  )\r\n  const loadSegmentationStage =\r\n    segmentationConfig.model === 'meet'\r\n      ? buildSoftmaxStage(\r\n          gl,\r\n          vertexShader,\r\n          positionBuffer,\r\n          texCoordBuffer,\r\n          segmentationConfig,\r\n          tflite,\r\n          segmentationTexture\r\n        )\r\n      : buildLoadSegmentationStage(\r\n          gl,\r\n          vertexShader,\r\n          positionBuffer,\r\n          texCoordBuffer,\r\n          segmentationConfig,\r\n          tflite,\r\n          segmentationTexture\r\n        )\r\n  const jointBilateralFilterStage = buildJointBilateralFilterStage(\r\n    gl,\r\n    vertexShader,\r\n    positionBuffer,\r\n    texCoordBuffer,\r\n    segmentationTexture,\r\n    segmentationConfig,\r\n    personMaskTexture,\r\n    canvas\r\n  )\r\n  const backgroundStage =\r\n    backgroundConfig.type === 'blur'\r\n      ? buildBackgroundBlurStage(\r\n          gl,\r\n          vertexShader,\r\n          positionBuffer,\r\n          texCoordBuffer,\r\n          personMaskTexture,\r\n          canvas\r\n        )\r\n      : buildBackgroundImageStage(\r\n          gl,\r\n          positionBuffer,\r\n          texCoordBuffer,\r\n          personMaskTexture,\r\n          backgroundImage,\r\n          canvas\r\n        )\r\n\r\n  async function render() {\r\n    gl.clearColor(0, 0, 0, 0)\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\r\n\r\n    // texImage2D seems faster than texSubImage2D to upload\r\n    // video texture\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D,\r\n      0,\r\n      gl.RGBA,\r\n      gl.RGBA,\r\n      gl.UNSIGNED_BYTE,\r\n      sourcePlayback.htmlElement\r\n    )\r\n\r\n    gl.bindVertexArray(vertexArray)\r\n\r\n    resizingStage.render()\r\n\r\n    addFrameEvent()\r\n\r\n    tflite._runInference()\r\n\r\n    addFrameEvent()\r\n\r\n    loadSegmentationStage.render()\r\n    jointBilateralFilterStage.render()\r\n    backgroundStage.render()\r\n  }\r\n\r\n  function updatePostProcessingConfig(\r\n    postProcessingConfig: PostProcessingConfig\r\n  ) {\r\n    jointBilateralFilterStage.updateSigmaSpace(\r\n      postProcessingConfig.jointBilateralFilter.sigmaSpace\r\n    )\r\n    jointBilateralFilterStage.updateSigmaColor(\r\n      postProcessingConfig.jointBilateralFilter.sigmaColor\r\n    )\r\n\r\n    if (backgroundConfig.type === 'image') {\r\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\r\n      backgroundImageStage.updateCoverage(postProcessingConfig.coverage)\r\n      backgroundImageStage.updateLightWrapping(\r\n        postProcessingConfig.lightWrapping\r\n      )\r\n      backgroundImageStage.updateBlendMode(postProcessingConfig.blendMode)\r\n    } else if (backgroundConfig.type === 'blur') {\r\n      const backgroundBlurStage = backgroundStage as BackgroundBlurStage\r\n      backgroundBlurStage.updateCoverage(postProcessingConfig.coverage)\r\n    } else {\r\n      // TODO Handle no background in a separate pipeline path\r\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\r\n      backgroundImageStage.updateCoverage([0, 0.9999])\r\n      backgroundImageStage.updateLightWrapping(0)\r\n    }\r\n  }\r\n\r\n  function cleanUp() {\r\n    backgroundStage.cleanUp()\r\n    jointBilateralFilterStage.cleanUp()\r\n    loadSegmentationStage.cleanUp()\r\n    resizingStage.cleanUp()\r\n\r\n    gl.deleteTexture(personMaskTexture)\r\n    gl.deleteTexture(segmentationTexture)\r\n    gl.deleteTexture(inputFrameTexture)\r\n    gl.deleteBuffer(texCoordBuffer)\r\n    gl.deleteBuffer(positionBuffer)\r\n    gl.deleteVertexArray(vertexArray)\r\n    gl.deleteShader(vertexShader)\r\n  }\r\n\r\n  return { render, updatePostProcessingConfig, cleanUp }\r\n}\r\n","import {\r\n  inputResolutions,\r\n  SegmentationConfig,\r\n} from '../../core/helpers/segmentationHelper'\r\nimport { TFLite } from '../../core/hooks/useTFLite'\r\nimport {\r\n  compileShader,\r\n  createPiplelineStageProgram,\r\n  createTexture,\r\n  glsl,\r\n} from '../helpers/webglHelper'\r\n\r\nexport function buildSoftmaxStage(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  segmentationConfig: SegmentationConfig,\r\n  tflite: TFLite,\r\n  outputTexture: WebGLTexture\r\n) {\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputSegmentation;\r\n\r\n    in vec2 v_texCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main() {\r\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\r\n      float shift = max(segmentation.r, segmentation.g);\r\n      float backgroundExp = exp(segmentation.r - shift);\r\n      float personExp = exp(segmentation.g - shift);\r\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\r\n    }\r\n  `\r\n\r\n  // TFLite memory will be accessed as float32\r\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\r\n\r\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\r\n    segmentationConfig.inputResolution\r\n  ]\r\n\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\r\n  const inputTexture = createTexture(\r\n    gl,\r\n    gl.RG32F,\r\n    segmentationWidth,\r\n    segmentationHeight\r\n  )\r\n\r\n  const frameBuffer = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n  gl.framebufferTexture2D(\r\n    gl.FRAMEBUFFER,\r\n    gl.COLOR_ATTACHMENT0,\r\n    gl.TEXTURE_2D,\r\n    outputTexture,\r\n    0\r\n  )\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform1i(inputLocation, 1)\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\r\n    gl.useProgram(program)\r\n    gl.activeTexture(gl.TEXTURE1)\r\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\r\n    gl.texSubImage2D(\r\n      gl.TEXTURE_2D,\r\n      0,\r\n      0,\r\n      0,\r\n      segmentationWidth,\r\n      segmentationHeight,\r\n      gl.RG,\r\n      gl.FLOAT,\r\n      tflite.HEAPF32,\r\n      tfliteOutputMemoryOffset\r\n    )\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteFramebuffer(frameBuffer)\r\n    gl.deleteTexture(inputTexture)\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n  }\r\n\r\n  return { render, cleanUp }\r\n}\r\n","import {\r\n  inputResolutions,\r\n  SegmentationConfig,\r\n} from '../../core/helpers/segmentationHelper'\r\nimport { TFLite } from '../../core/hooks/useTFLite'\r\nimport {\r\n  compileShader,\r\n  createPiplelineStageProgram,\r\n  createTexture,\r\n  glsl,\r\n} from '../helpers/webglHelper'\r\n\r\nexport function buildLoadSegmentationStage(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  segmentationConfig: SegmentationConfig,\r\n  tflite: TFLite,\r\n  outputTexture: WebGLTexture\r\n) {\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputSegmentation;\r\n\r\n    in vec2 v_texCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main() {\r\n      float segmentation = texture(u_inputSegmentation, v_texCoord).r;\r\n      outColor = vec4(vec3(0.0), segmentation);\r\n    }\r\n  `\r\n\r\n  // TFLite memory will be accessed as float32\r\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\r\n\r\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\r\n    segmentationConfig.inputResolution\r\n  ]\r\n\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\r\n  const inputTexture = createTexture(\r\n    gl,\r\n    gl.R32F,\r\n    segmentationWidth,\r\n    segmentationHeight\r\n  )\r\n\r\n  const frameBuffer = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n  gl.framebufferTexture2D(\r\n    gl.FRAMEBUFFER,\r\n    gl.COLOR_ATTACHMENT0,\r\n    gl.TEXTURE_2D,\r\n    outputTexture,\r\n    0\r\n  )\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform1i(inputLocation, 1)\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\r\n    gl.useProgram(program)\r\n    gl.activeTexture(gl.TEXTURE1)\r\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\r\n    gl.texSubImage2D(\r\n      gl.TEXTURE_2D,\r\n      0,\r\n      0,\r\n      0,\r\n      segmentationWidth,\r\n      segmentationHeight,\r\n      gl.RED,\r\n      gl.FLOAT,\r\n      tflite.HEAPF32,\r\n      tfliteOutputMemoryOffset\r\n    )\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteFramebuffer(frameBuffer)\r\n    gl.deleteTexture(inputTexture)\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n  }\r\n\r\n  return { render, cleanUp }\r\n}\r\n","import {\r\n  inputResolutions,\r\n  SegmentationConfig,\r\n} from '../../core/helpers/segmentationHelper'\r\nimport {\r\n  compileShader,\r\n  createPiplelineStageProgram,\r\n  glsl,\r\n} from '../helpers/webglHelper'\r\n\r\nexport function buildJointBilateralFilterStage(\r\n  gl: WebGL2RenderingContext,\r\n  vertexShader: WebGLShader,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  inputTexture: WebGLTexture,\r\n  segmentationConfig: SegmentationConfig,\r\n  outputTexture: WebGLTexture,\r\n  canvas: HTMLCanvasElement\r\n) {\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputFrame;\r\n    uniform sampler2D u_segmentationMask;\r\n    uniform vec2 u_texelSize;\r\n    uniform float u_step;\r\n    uniform float u_radius;\r\n    uniform float u_offset;\r\n    uniform float u_sigmaTexel;\r\n    uniform float u_sigmaColor;\r\n\r\n    in vec2 v_texCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    float gaussian(float x, float sigma) {\r\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\r\n      return exp((x * x) * coeff);\r\n    }\r\n\r\n    void main() {\r\n      vec2 centerCoord = v_texCoord;\r\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\r\n      float newVal = 0.0;\r\n\r\n      float spaceWeight = 0.0;\r\n      float colorWeight = 0.0;\r\n      float totalWeight = 0.0;\r\n\r\n      // Subsample kernel space.\r\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\r\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\r\n          vec2 shift = vec2(j, i) * u_texelSize;\r\n          vec2 coord = vec2(centerCoord + shift);\r\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\r\n          float outVal = texture(u_segmentationMask, coord).a;\r\n\r\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\r\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\r\n          totalWeight += spaceWeight * colorWeight;\r\n\r\n          newVal += spaceWeight * colorWeight * outVal;\r\n        }\r\n      }\r\n      newVal /= totalWeight;\r\n\r\n      outColor = vec4(vec3(0.0), newVal);\r\n    }\r\n  `\r\n\r\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\r\n    segmentationConfig.inputResolution\r\n  ]\r\n  const { width: outputWidth, height: outputHeight } = canvas\r\n  const texelWidth = 1 / outputWidth\r\n  const texelHeight = 1 / outputHeight\r\n\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\r\n  const segmentationMaskLocation = gl.getUniformLocation(\r\n    program,\r\n    'u_segmentationMask'\r\n  )\r\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\r\n  const stepLocation = gl.getUniformLocation(program, 'u_step')\r\n  const radiusLocation = gl.getUniformLocation(program, 'u_radius')\r\n  const offsetLocation = gl.getUniformLocation(program, 'u_offset')\r\n  const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel')\r\n  const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor')\r\n\r\n  const frameBuffer = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n  gl.framebufferTexture2D(\r\n    gl.FRAMEBUFFER,\r\n    gl.COLOR_ATTACHMENT0,\r\n    gl.TEXTURE_2D,\r\n    outputTexture,\r\n    0\r\n  )\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform1i(inputFrameLocation, 0)\r\n  gl.uniform1i(segmentationMaskLocation, 1)\r\n  gl.uniform2f(texelSizeLocation, texelWidth, texelHeight)\r\n\r\n  // Ensures default values are configured to prevent infinite\r\n  // loop in fragment shader\r\n  updateSigmaSpace(0)\r\n  updateSigmaColor(0)\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, outputWidth, outputHeight)\r\n    gl.useProgram(program)\r\n    gl.activeTexture(gl.TEXTURE1)\r\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n\r\n  function updateSigmaSpace(sigmaSpace: number) {\r\n    sigmaSpace *= Math.max(\r\n      outputWidth / segmentationWidth,\r\n      outputHeight / segmentationHeight\r\n    )\r\n\r\n    const kSparsityFactor = 0.66 // Higher is more sparse.\r\n    const sparsity = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor)\r\n    const step = sparsity\r\n    const radius = sigmaSpace\r\n    const offset = step > 1 ? step * 0.5 : 0\r\n    const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace\r\n\r\n    gl.useProgram(program)\r\n    gl.uniform1f(stepLocation, step)\r\n    gl.uniform1f(radiusLocation, radius)\r\n    gl.uniform1f(offsetLocation, offset)\r\n    gl.uniform1f(sigmaTexelLocation, sigmaTexel)\r\n  }\r\n\r\n  function updateSigmaColor(sigmaColor: number) {\r\n    gl.useProgram(program)\r\n    gl.uniform1f(sigmaColorLocation, sigmaColor)\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteFramebuffer(frameBuffer)\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n  }\r\n\r\n  return { render, updateSigmaSpace, updateSigmaColor, cleanUp }\r\n}\r\n","import { BlendMode } from '../../core/helpers/postProcessingHelper'\r\nimport {\r\n  compileShader,\r\n  createPiplelineStageProgram,\r\n  createTexture,\r\n  glsl,\r\n} from '../helpers/webglHelper'\r\n\r\nexport type BackgroundImageStage = {\r\n  render(): void\r\n  updateCoverage(coverage: [number, number]): void\r\n  updateLightWrapping(lightWrapping: number): void\r\n  updateBlendMode(blendMode: BlendMode): void\r\n  cleanUp(): void\r\n}\r\n\r\nexport function buildBackgroundImageStage(\r\n  gl: WebGL2RenderingContext,\r\n  positionBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  personMaskTexture: WebGLTexture,\r\n  backgroundImage: HTMLImageElement | null,\r\n  canvas: HTMLCanvasElement\r\n): BackgroundImageStage {\r\n  const vertexShaderSource = glsl`#version 300 es\r\n\r\n    uniform vec2 u_backgroundScale;\r\n    uniform vec2 u_backgroundOffset;\r\n\r\n    in vec2 a_position;\r\n    in vec2 a_texCoord;\r\n\r\n    out vec2 v_texCoord;\r\n    out vec2 v_backgroundCoord;\r\n\r\n    void main() {\r\n      // Flipping Y is required when rendering to canvas\r\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\r\n      v_texCoord = a_texCoord;\r\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\r\n    }\r\n  `\r\n\r\n  const fragmentShaderSource = glsl`#version 300 es\r\n\r\n    precision highp float;\r\n\r\n    uniform sampler2D u_inputFrame;\r\n    uniform sampler2D u_personMask;\r\n    uniform sampler2D u_background;\r\n    uniform vec2 u_coverage;\r\n    uniform float u_lightWrapping;\r\n    uniform float u_blendMode;\r\n\r\n    in vec2 v_texCoord;\r\n    in vec2 v_backgroundCoord;\r\n\r\n    out vec4 outColor;\r\n\r\n    vec3 screen(vec3 a, vec3 b) {\r\n      return 1.0 - (1.0 - a) * (1.0 - b);\r\n    }\r\n\r\n    vec3 linearDodge(vec3 a, vec3 b) {\r\n      return a + b;\r\n    }\r\n\r\n    void main() {\r\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\r\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\r\n      float personMask = texture(u_personMask, v_texCoord).a;\r\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\r\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\r\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap) +\r\n        (1.0 - u_blendMode) * screen(frameColor, lightWrap);\r\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\r\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\r\n    }\r\n  `\r\n\r\n  const { width: outputWidth, height: outputHeight } = canvas\r\n  const outputRatio = outputWidth / outputHeight\r\n\r\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\r\n  const fragmentShader = compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  )\r\n  const program = createPiplelineStageProgram(\r\n    gl,\r\n    vertexShader,\r\n    fragmentShader,\r\n    positionBuffer,\r\n    texCoordBuffer\r\n  )\r\n  const backgroundScaleLocation = gl.getUniformLocation(\r\n    program,\r\n    'u_backgroundScale'\r\n  )\r\n  const backgroundOffsetLocation = gl.getUniformLocation(\r\n    program,\r\n    'u_backgroundOffset'\r\n  )\r\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\r\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\r\n  const backgroundLocation = gl.getUniformLocation(program, 'u_background')\r\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\r\n  const lightWrappingLocation = gl.getUniformLocation(\r\n    program,\r\n    'u_lightWrapping'\r\n  )\r\n  const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode')\r\n\r\n  gl.useProgram(program)\r\n  gl.uniform2f(backgroundScaleLocation, 1, 1)\r\n  gl.uniform2f(backgroundOffsetLocation, 0, 0)\r\n  gl.uniform1i(inputFrameLocation, 0)\r\n  gl.uniform1i(personMaskLocation, 1)\r\n  gl.uniform2f(coverageLocation, 0, 1)\r\n  gl.uniform1f(lightWrappingLocation, 0)\r\n  gl.uniform1f(blendModeLocation, 0)\r\n\r\n  let backgroundTexture: WebGLTexture | null = null\r\n  // TODO Find a better to handle background being loaded\r\n  if (backgroundImage?.complete) {\r\n    updateBackgroundImage(backgroundImage)\r\n  } else if (backgroundImage) {\r\n    backgroundImage.onload = () => {\r\n      updateBackgroundImage(backgroundImage)\r\n    }\r\n  }\r\n\r\n  function render() {\r\n    gl.viewport(0, 0, outputWidth, outputHeight)\r\n    gl.useProgram(program)\r\n    gl.activeTexture(gl.TEXTURE1)\r\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\r\n    if (backgroundTexture !== null) {\r\n      gl.activeTexture(gl.TEXTURE2)\r\n      gl.bindTexture(gl.TEXTURE_2D, backgroundTexture)\r\n      // TODO Handle correctly the background not loaded yet\r\n      gl.uniform1i(backgroundLocation, 2)\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n\r\n  function updateBackgroundImage(backgroundImage: HTMLImageElement) {\r\n    backgroundTexture = createTexture(\r\n      gl,\r\n      gl.RGBA8,\r\n      backgroundImage.naturalWidth,\r\n      backgroundImage.naturalHeight,\r\n      gl.LINEAR,\r\n      gl.LINEAR\r\n    )\r\n    gl.texSubImage2D(\r\n      gl.TEXTURE_2D,\r\n      0,\r\n      0,\r\n      0,\r\n      backgroundImage.naturalWidth,\r\n      backgroundImage.naturalHeight,\r\n      gl.RGBA,\r\n      gl.UNSIGNED_BYTE,\r\n      backgroundImage\r\n    )\r\n\r\n    let xOffset = 0\r\n    let yOffset = 0\r\n    let backgroundWidth = backgroundImage.naturalWidth\r\n    let backgroundHeight = backgroundImage.naturalHeight\r\n    const backgroundRatio = backgroundWidth / backgroundHeight\r\n    if (backgroundRatio < outputRatio) {\r\n      backgroundHeight = backgroundWidth / outputRatio\r\n      yOffset = (backgroundImage.naturalHeight - backgroundHeight) / 2\r\n    } else {\r\n      backgroundWidth = backgroundHeight * outputRatio\r\n      xOffset = (backgroundImage.naturalWidth - backgroundWidth) / 2\r\n    }\r\n\r\n    const xScale = backgroundWidth / backgroundImage.naturalWidth\r\n    const yScale = backgroundHeight / backgroundImage.naturalHeight\r\n    xOffset /= backgroundImage.naturalWidth\r\n    yOffset /= backgroundImage.naturalHeight\r\n\r\n    gl.uniform2f(backgroundScaleLocation, xScale, yScale)\r\n    gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset)\r\n  }\r\n\r\n  function updateCoverage(coverage: [number, number]) {\r\n    gl.useProgram(program)\r\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\r\n  }\r\n\r\n  function updateLightWrapping(lightWrapping: number) {\r\n    gl.useProgram(program)\r\n    gl.uniform1f(lightWrappingLocation, lightWrapping)\r\n  }\r\n\r\n  function updateBlendMode(blendMode: BlendMode) {\r\n    gl.useProgram(program)\r\n    gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1)\r\n  }\r\n\r\n  function cleanUp() {\r\n    gl.deleteTexture(backgroundTexture)\r\n    gl.deleteProgram(program)\r\n    gl.deleteShader(fragmentShader)\r\n    gl.deleteShader(vertexShader)\r\n  }\r\n\r\n  return {\r\n    render,\r\n    updateCoverage,\r\n    updateLightWrapping,\r\n    updateBlendMode,\r\n    cleanUp,\r\n  }\r\n}\r\n","import { BodyPix } from '@tensorflow-models/body-pix'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { buildCanvas2dPipeline } from '../../pipelines/canvas2d/canvas2dPipeline'\r\nimport { buildWebGL2Pipeline } from '../../pipelines/webgl2/webgl2Pipeline'\r\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\r\nimport { RenderingPipeline } from '../helpers/renderingPipelineHelper'\r\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\r\nimport { SourcePlayback } from '../helpers/sourceHelper'\r\nimport { TFLite } from './useTFLite'\r\n\r\nfunction useRenderingPipeline(\r\n  sourcePlayback: SourcePlayback,\r\n  backgroundConfig: BackgroundConfig,\r\n  segmentationConfig: SegmentationConfig,\r\n  bodyPix: BodyPix,\r\n  tflite: TFLite\r\n) {\r\n  const [pipeline, setPipeline] = useState<RenderingPipeline | null>(null)\r\n  const backgroundImageRef = useRef<HTMLImageElement>(null)\r\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\r\n  const [fps, setFps] = useState(0)\r\n  const [durations, setDurations] = useState<number[]>([])\r\n\r\n  useEffect(() => {\r\n    // The useEffect cleanup function is not enough to stop\r\n    // the rendering loop when the framerate is low\r\n    let shouldRender = true\r\n\r\n    let previousTime = 0\r\n    let beginTime = 0\r\n    let eventCount = 0\r\n    let frameCount = 0\r\n    const frameDurations: number[] = []\r\n\r\n    let renderRequestId: number\r\n\r\n    const newPipeline =\r\n      segmentationConfig.pipeline === 'webgl2'\r\n        ? buildWebGL2Pipeline(\r\n            sourcePlayback,\r\n            backgroundImageRef.current,\r\n            backgroundConfig,\r\n            segmentationConfig,\r\n            canvasRef.current,\r\n            tflite,\r\n            addFrameEvent\r\n          )\r\n        : buildCanvas2dPipeline(\r\n            sourcePlayback,\r\n            backgroundConfig,\r\n            segmentationConfig,\r\n            canvasRef.current,\r\n            bodyPix,\r\n            tflite,\r\n            addFrameEvent\r\n          )\r\n\r\n    async function render() {\r\n      if (!shouldRender) {\r\n        return\r\n      }\r\n      beginFrame()\r\n      await newPipeline.render()\r\n      endFrame()\r\n      renderRequestId = requestAnimationFrame(render)\r\n    }\r\n\r\n    function beginFrame() {\r\n      beginTime = Date.now()\r\n    }\r\n\r\n    function addFrameEvent() {\r\n      const time = Date.now()\r\n      frameDurations[eventCount] = time - beginTime\r\n      beginTime = time\r\n      eventCount++\r\n    }\r\n\r\n    function endFrame() {\r\n      const time = Date.now()\r\n      frameDurations[eventCount] = time - beginTime\r\n      frameCount++\r\n      if (time >= previousTime + 1000) {\r\n        setFps((frameCount * 1000) / (time - previousTime))\r\n        setDurations(frameDurations)\r\n        previousTime = time\r\n        frameCount = 0\r\n      }\r\n      eventCount = 0\r\n    }\r\n\r\n    render()\r\n    console.log(\r\n      'Animation started:',\r\n      sourcePlayback,\r\n      backgroundConfig,\r\n      segmentationConfig\r\n    )\r\n\r\n    setPipeline(newPipeline)\r\n\r\n    return () => {\r\n      shouldRender = false\r\n      cancelAnimationFrame(renderRequestId)\r\n      newPipeline.cleanUp()\r\n      console.log(\r\n        'Animation stopped:',\r\n        sourcePlayback,\r\n        backgroundConfig,\r\n        segmentationConfig\r\n      )\r\n\r\n      setPipeline(null)\r\n    }\r\n  }, [sourcePlayback, backgroundConfig, segmentationConfig, bodyPix, tflite])\r\n\r\n  return {\r\n    pipeline,\r\n    backgroundImageRef,\r\n    canvasRef,\r\n    fps,\r\n    durations,\r\n  }\r\n}\r\n\r\nexport default useRenderingPipeline\r\n","import { BodyPix } from \"@tensorflow-models/body-pix\";\r\nimport React, { useEffect } from \"react\";\r\nimport { BackgroundConfig } from \"../core/helpers/backgroundHelper\";\r\nimport { PostProcessingConfig } from \"../core/helpers/postProcessingHelper\";\r\nimport { SegmentationConfig } from \"../core/helpers/segmentationHelper\";\r\nimport { SourcePlayback } from \"../core/helpers/sourceHelper\";\r\nimport useRenderingPipeline from \"../core/hooks/useRenderingPipeline\";\r\nimport { TFLite } from \"../core/hooks/useTFLite\";\r\n\r\ninterface VirtualPhotoPropsType {\r\n  sourcePlayback: SourcePlayback;\r\n  backgroundConfig: BackgroundConfig;\r\n  segmentationConfig: SegmentationConfig;\r\n  postProcessingConfig: PostProcessingConfig;\r\n  bodyPix: BodyPix;\r\n  tflite: TFLite;\r\n}\r\n\r\nfunction VirtualPhoto(props: VirtualPhotoPropsType) {\r\n  const {\r\n    pipeline,\r\n    backgroundImageRef,\r\n    canvasRef,\r\n    // fps,\r\n    // durations: [resizingDuration, inferenceDuration, postProcessingDuration],\r\n  } = useRenderingPipeline(\r\n    props.sourcePlayback,\r\n    props.backgroundConfig,\r\n    props.segmentationConfig,\r\n    props.bodyPix,\r\n    props.tflite\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (pipeline) {\r\n      pipeline.updatePostProcessingConfig(props.postProcessingConfig);\r\n    }\r\n  }, [pipeline, props.postProcessingConfig]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={{ width: \"400px\", height: \"250px\", position: \"absolute\", right: \"0\"}}>\r\n        {props.backgroundConfig.type === \"image\" && (\r\n          <img\r\n            ref={backgroundImageRef}\r\n            src={props.backgroundConfig.url}\r\n            alt=\"\"\r\n            hidden={props.segmentationConfig.pipeline === \"webgl2\"}\r\n            style={{\r\n              position: \"absolute\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              objectFit: \"cover\",\r\n            }}\r\n            />\r\n            )}\r\n        <canvas\r\n          id=\"grid-bg-photo\"\r\n          // The key attribute is required to create a new canvas when switching\r\n          // context mode\r\n          key={props.segmentationConfig.pipeline}\r\n          ref={canvasRef}\r\n          width={props.sourcePlayback.width}\r\n          height={props.sourcePlayback.height}\r\n          style={{\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            objectFit: \"cover\",\r\n          }}\r\n          />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VirtualPhoto;\r\n","export type BackgroundConfig = {\r\n  type: 'none' | 'blur' | 'image'\r\n  url?: string\r\n}\r\n\r\nexport const backgroundImageUrls = [\r\n  'grid_background',\r\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.png`)\r\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport { useEffect, useState } from 'react'\r\n\r\nfunction useBodyPix() {\r\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\r\n\r\n  useEffect(() => {\r\n    async function loadBodyPix() {\r\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\r\n      await tf.ready()\r\n      setBodyPix(await tfBodyPix.load())\r\n      console.log('TensorFlow.js and BodyPix loaded')\r\n    }\r\n\r\n    loadBodyPix()\r\n  }, [])\r\n\r\n  return bodyPix\r\n}\r\n\r\nexport default useBodyPix\r\n","import { useEffect, useState } from 'react'\r\nimport {\r\n  getTFLiteModelFileName,\r\n  SegmentationConfig,\r\n} from '../helpers/segmentationHelper'\r\n\r\ndeclare function createTFLiteModule(): Promise<TFLite>\r\ndeclare function createTFLiteSIMDModule(): Promise<TFLite>\r\n\r\nexport interface TFLite extends EmscriptenModule {\r\n  _getModelBufferMemoryOffset(): number\r\n  _getInputMemoryOffset(): number\r\n  _getInputHeight(): number\r\n  _getInputWidth(): number\r\n  _getInputChannelCount(): number\r\n  _getOutputMemoryOffset(): number\r\n  _getOutputHeight(): number\r\n  _getOutputWidth(): number\r\n  _getOutputChannelCount(): number\r\n  _loadModel(bufferSize: number): number\r\n  _runInference(): number\r\n}\r\n\r\nfunction useTFLite(segmentationConfig: SegmentationConfig) {\r\n  const [tflite, setTFLite] = useState<TFLite>()\r\n  const [tfliteSIMD, setTFLiteSIMD] = useState<TFLite>()\r\n  const [selectedTFLite, setSelectedTFLite] = useState<TFLite>()\r\n  const [isSIMDSupported, setSIMDSupported] = useState(false)\r\n\r\n  useEffect(() => {\r\n    async function loadTFLite() {\r\n      createTFLiteModule().then(setTFLite)\r\n      try {\r\n        const createdTFLiteSIMD = await createTFLiteSIMDModule()\r\n        setTFLiteSIMD(createdTFLiteSIMD)\r\n        setSIMDSupported(true)\r\n      } catch (error) {\r\n        console.warn('Failed to create TFLite SIMD WebAssembly module.', error)\r\n      }\r\n    }\r\n\r\n    loadTFLite()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    async function loadTFLiteModel() {\r\n      if (\r\n        !tflite ||\r\n        (isSIMDSupported && !tfliteSIMD) ||\r\n        (!isSIMDSupported && segmentationConfig.backend === 'wasmSimd') ||\r\n        (segmentationConfig.model !== 'meet' &&\r\n          segmentationConfig.model !== 'mlkit')\r\n      ) {\r\n        return\r\n      }\r\n\r\n      setSelectedTFLite(undefined)\r\n\r\n      const newSelectedTFLite =\r\n        segmentationConfig.backend === 'wasmSimd' ? tfliteSIMD : tflite\r\n\r\n      if (!newSelectedTFLite) {\r\n        throw new Error(\r\n          `TFLite backend unavailable: ${segmentationConfig.backend}`\r\n        )\r\n      }\r\n\r\n      const modelFileName = getTFLiteModelFileName(\r\n        segmentationConfig.model,\r\n        segmentationConfig.inputResolution\r\n      )\r\n      console.log('Loading tflite model:', modelFileName)\r\n\r\n      const modelResponse = await fetch(\r\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\r\n      )\r\n      const model = await modelResponse.arrayBuffer()\r\n      console.log('Model buffer size:', model.byteLength)\r\n\r\n      const modelBufferOffset = newSelectedTFLite._getModelBufferMemoryOffset()\r\n      console.log('Model buffer memory offset:', modelBufferOffset)\r\n      console.log('Loading model buffer...')\r\n      newSelectedTFLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\r\n      console.log(\r\n        '_loadModel result:',\r\n        newSelectedTFLite._loadModel(model.byteLength)\r\n      )\r\n\r\n      console.log(\r\n        'Input memory offset:',\r\n        newSelectedTFLite._getInputMemoryOffset()\r\n      )\r\n      console.log('Input height:', newSelectedTFLite._getInputHeight())\r\n      console.log('Input width:', newSelectedTFLite._getInputWidth())\r\n      console.log('Input channels:', newSelectedTFLite._getInputChannelCount())\r\n\r\n      console.log(\r\n        'Output memory offset:',\r\n        newSelectedTFLite._getOutputMemoryOffset()\r\n      )\r\n      console.log('Output height:', newSelectedTFLite._getOutputHeight())\r\n      console.log('Output width:', newSelectedTFLite._getOutputWidth())\r\n      console.log(\r\n        'Output channels:',\r\n        newSelectedTFLite._getOutputChannelCount()\r\n      )\r\n\r\n      setSelectedTFLite(newSelectedTFLite)\r\n    }\r\n\r\n    loadTFLiteModel()\r\n  }, [\r\n    tflite,\r\n    tfliteSIMD,\r\n    isSIMDSupported,\r\n    segmentationConfig.model,\r\n    segmentationConfig.backend,\r\n    segmentationConfig.inputResolution,\r\n  ])\r\n\r\n  return { tflite: selectedTFLite, isSIMDSupported }\r\n}\r\n\r\nexport default useTFLite\r\n","import React, { SyntheticEvent, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Socket, io } from \"socket.io-client\";\r\nimport VirtualPhoto from \"../components/VirtualPhoto\";\r\nimport Peer from \"simple-peer\";\r\n\r\nimport {\r\n  BackgroundConfig,\r\n  backgroundImageUrls,\r\n} from \"../core/helpers/backgroundHelper\";\r\nimport { PostProcessingConfig } from \"../core/helpers/postProcessingHelper\";\r\nimport { SegmentationConfig } from \"../core/helpers/segmentationHelper\";\r\nimport { SourcePlayback } from \"../core/helpers/sourceHelper\";\r\nimport useBodyPix from \"../core/hooks/useBodyPix\";\r\nimport useTFLite from \"../core/hooks/useTFLite\";\r\nimport { PhotoType } from \"../types/PrescriptionType\";\r\nconst SOCKET_URL = \"http://localhost:5002\";\r\n\r\ninterface CheckToolPropsType {\r\n  checkedPhotoList: PhotoType[];\r\n  setCheckedPhotoList: Function;\r\n  isHost: string;\r\n  userName: string;\r\n  meetingNumber: string;\r\n}\r\n\r\nfunction CheckTool({\r\n  checkedPhotoList,\r\n  setCheckedPhotoList,\r\n  isHost,\r\n  userName,\r\n  meetingNumber,\r\n}: CheckToolPropsType) {\r\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>();\r\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\r\n    type: \"image\",\r\n    url: backgroundImageUrls[0],\r\n  });\r\n  const [segmentationConfig, setSegmentationConfig] =\r\n    useState<SegmentationConfig>({\r\n      model: \"meet\",\r\n      backend: \"wasm\",\r\n      inputResolution: \"160x96\",\r\n      pipeline: \"webgl2\",\r\n    });\r\n  const [postProcessingConfig, setPostProcessingConfig] =\r\n    useState<PostProcessingConfig>({\r\n      smoothSegmentationMask: true,\r\n      jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.1 },\r\n      coverage: [0.5, 0.75],\r\n      lightWrapping: 0.3,\r\n      blendMode: \"screen\",\r\n    });\r\n  const bodyPix = useBodyPix();\r\n  const { tflite, isSIMDSupported } = useTFLite(segmentationConfig);\r\n  const [isClick, setIsClick] = useState<Boolean>(false);\r\n  const [socketData, setSocketData] = useState<Socket>();\r\n\r\n  const [stream, setStream] = useState<MediaStream>();\r\n  const [myId, setMyId] = useState(\"\");\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [callerSignal, setCallerSignal] = useState<Peer.SignalData | string>(\r\n    \"\"\r\n  );\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const myVideo = useRef() as React.LegacyRef<HTMLVideoElement> &\r\n    React.MutableRefObject<HTMLVideoElement>;\r\n  const userVideo = useRef() as React.LegacyRef<HTMLVideoElement> &\r\n    React.MutableRefObject<HTMLVideoElement>;\r\n  const connection = useRef<Peer.Instance>();\r\n\r\n  let websocket: Socket | undefined = undefined;\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: false })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        console.log(stream);\r\n        myVideo.current.srcObject = stream;\r\n      });\r\n\r\n    if (websocket === undefined) {\r\n      websocket = io(SOCKET_URL, {\r\n        path: \"/socket.io\", // 서버 path와 일치시켜준다\r\n        transports: [\"websocket\"],\r\n      });\r\n\r\n      websocket.on(\"connect\", () => {\r\n        console.info(\"connect!\");\r\n        if (websocket !== undefined)\r\n          websocket.emit(\r\n            \"join\",\r\n            JSON.stringify({ room_id: meetingNumber, isHost, userName })\r\n          );\r\n      });\r\n\r\n      websocket.on(\"getid\", (id) => {\r\n        setMyId(id);\r\n      });\r\n\r\n      websocket.on(\"disconnect\", () => console.info(\"disconnect!\"));\r\n      setSocketData(websocket);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (socketData && stream) {\r\n      const peer = new Peer({\r\n        initiator: true,\r\n        trickle: false,\r\n        stream: stream,\r\n      });\r\n\r\n      peer.on(\"signal\", (data) => {\r\n        socketData.emit(\"caller\", {\r\n          room_id: meetingNumber,\r\n          signalData: data,\r\n          from: myId,\r\n        });\r\n      });\r\n      peer.on(\"stream\", (stream) => {\r\n        console.log(stream);\r\n        userVideo.current.srcObject = stream;\r\n      });\r\n      socketData.on(\"acceptcall\", (signal) => {\r\n        setCallAccepted(true);\r\n        peer.signal(signal);\r\n      });\r\n      connection.current = peer;\r\n    }\r\n  }, [meetingNumber, myId, socketData, stream]);\r\n\r\n  function handleVideoLoad(event: SyntheticEvent) {\r\n    const video = event.target as HTMLVideoElement\r\n    setSourcePlayback({\r\n      htmlElement: video,\r\n      width: video.videoWidth,\r\n      height: video.videoHeight,\r\n    })\r\n    setLoading(false)\r\n    console.log(video);\r\n  }\r\n\r\n  const clickCheck = () => {\r\n    setIsClick(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 style={{ color: \"black\" }}>검사툴</h4>\r\n      <div\r\n        style={{\r\n          width: \"90%\",\r\n          padding: \"10px\",\r\n          height: \"90vh\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        <button onClick={clickCheck}>캡처하기</button>\r\n        <button>비디오</button>\r\n        {/* <div style={{ width: \"300px\", height: \"300px\", visibility: \"hidden\" }}>\r\n          <video\r\n            ref={myVideo}\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n            playsInline\r\n            autoPlay\r\n            muted\r\n          />\r\n        </div> */}\r\n        {callAccepted && (\r\n          <div style={{ width: \"300px\", height: \"300px\" }}>\r\n            {isLoading && <progress></progress>}\r\n            <video\r\n              style={{ width: \"100%\", height: \"100%\", visibility: \"hidden\", position: \"absolute\" }}\r\n              playsInline\r\n              ref={userVideo}\r\n              autoPlay\r\n              muted\r\n              onLoadedData={handleVideoLoad}\r\n            />\r\n          </div>\r\n        )}\r\n        <div id=\"image-container\">\r\n          {checkedPhotoList.length !== 0 &&\r\n            checkedPhotoList.map((checkedPhoto, i) => (\r\n              <div\r\n                key={i}\r\n                style={{\r\n                  width: \"100%\",\r\n                  height: \"250px\",\r\n                  marginBottom: \"10px\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <img\r\n                  style={{ width: \"100%\", height: \"100%\" }}\r\n                  src={checkedPhoto.image}\r\n                  alt={`그리드배경이 들어간 사진 ${i}`}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n        {sourcePlayback && tflite && bodyPix && (\r\n          <VirtualPhoto\r\n            sourcePlayback={sourcePlayback}\r\n            backgroundConfig={backgroundConfig}\r\n            segmentationConfig={segmentationConfig}\r\n            postProcessingConfig={postProcessingConfig}\r\n            bodyPix={bodyPix}\r\n            tflite={tflite}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CheckTool;\r\n","import React from 'react'\r\n\r\nfunction DiagnosticHistory() {\r\n  return (\r\n    <>\r\n        <h4 style={{color: \"black\"}}>진단기록</h4>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DiagnosticHistory;","import React, { SyntheticEvent, useEffect, useRef, useState } from \"react\";\r\nimport { Socket, io } from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport { SourcePlayback } from \"../core/helpers/sourceHelper\";\r\nimport { BackgroundConfig, backgroundImageUrls } from \"../core/helpers/backgroundHelper\";\r\nimport { SegmentationConfig } from \"../core/helpers/segmentationHelper\";\r\nimport { PostProcessingConfig } from \"../core/helpers/postProcessingHelper\";\r\nimport useBodyPix from \"../core/hooks/useBodyPix\";\r\nimport useTFLite from \"../core/hooks/useTFLite\";\r\nimport VirtualPhoto from \"../components/VirtualPhoto\";\r\nconst SOCKET_URL = \"http://localhost:5002\";\r\n\r\ninterface ClientPropsType {\r\n  meetingNumber: string;\r\n  isHost: string;\r\n  userName: string;\r\n}\r\n\r\nfunction Client({ meetingNumber, isHost, userName }: ClientPropsType) {\r\n\r\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>();\r\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\r\n    type: \"image\",\r\n    url: backgroundImageUrls[0],\r\n  });\r\n  const [segmentationConfig, setSegmentationConfig] =\r\n    useState<SegmentationConfig>({\r\n      model: \"meet\",\r\n      backend: \"wasm\",\r\n      inputResolution: \"160x96\",\r\n      pipeline: \"webgl2\",\r\n    });\r\n  const [postProcessingConfig, setPostProcessingConfig] =\r\n    useState<PostProcessingConfig>({\r\n      smoothSegmentationMask: true,\r\n      jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.1 },\r\n      coverage: [0.5, 0.75],\r\n      lightWrapping: 0.3,\r\n      blendMode: \"screen\",\r\n    });\r\n  const bodyPix = useBodyPix();\r\n  const { tflite, isSIMDSupported } = useTFLite(segmentationConfig);\r\n\r\n  const [myId, setMyId] = useState(\"\");\r\n  const [stream, setStream] = useState<MediaStream>();\r\n  const [socketData, setSocketData] = useState<Socket>();\r\n\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [callerSignal, setCallerSignal] = useState<Peer.SignalData | string>(\r\n    \"\"\r\n  );\r\n  const [isLoading, setLoading] = useState(false);\r\n  const myVideo = useRef() as React.LegacyRef<HTMLVideoElement> &\r\n    React.MutableRefObject<HTMLVideoElement>;\r\n  const connection = useRef<Peer.Instance>();\r\n\r\n  let websocket: Socket | undefined = undefined;\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: false })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        console.log(stream);\r\n        myVideo.current.srcObject = stream;\r\n      });\r\n    if (websocket === undefined) {\r\n      websocket = io(SOCKET_URL, {\r\n        path: \"/socket.io\", // 서버 path와 일치시켜준다\r\n        transports: [\"websocket\"],\r\n      });\r\n\r\n      websocket.on(\"connect\", () => {\r\n        console.info(\"connect!\");\r\n        if (websocket !== undefined)\r\n          websocket.emit(\r\n            \"join\",\r\n            JSON.stringify({ room_id: meetingNumber, isHost, userName })\r\n          );\r\n      });\r\n\r\n      websocket.on(\"getid\", (id) => {\r\n        setMyId(id);\r\n      });\r\n\r\n      websocket.on(\"disconnect\", () => console.info(\"disconnect!\"));\r\n\r\n      websocket.on(\"caller\", (data) => {\r\n        setReceivingCall(true);\r\n        setCaller(data.from);\r\n        setCallerSignal(data.signal);\r\n        console.log(data);\r\n      });\r\n      setSocketData(websocket);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (receivingCall && caller && callerSignal && socketData) {\r\n      const peer = new Peer({\r\n        initiator: false,\r\n        trickle: false,\r\n        stream: stream,\r\n      });\r\n      peer.on(\"signal\", (data) => {\r\n        socketData.emit(\"answerCall\", { signal: data, to: caller });\r\n      });\r\n      peer.signal(callerSignal);\r\n      connection.current = peer;\r\n    }\r\n  }, [caller, callerSignal, receivingCall, socketData, stream]);\r\n\r\n  function handleVideoLoad(event: SyntheticEvent) {\r\n    const video = event.target as HTMLVideoElement\r\n    setSourcePlayback({\r\n      htmlElement: video,\r\n      width: video.videoWidth,\r\n      height: video.videoHeight,\r\n    })\r\n    setLoading(false)\r\n    console.log(video);\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ width: \"100%\", height: \"100%\"}}>\r\n        {isLoading && <progress></progress>}\r\n        <video\r\n          ref={myVideo}\r\n          style={{ width: \"100%\", height: \"100%\", visibility: \"hidden\", position: \"absolute\"}}\r\n          playsInline\r\n          autoPlay\r\n          muted\r\n          onLoadedData={handleVideoLoad}\r\n        />\r\n      </div>\r\n      {sourcePlayback && tflite && bodyPix && (\r\n          <VirtualPhoto\r\n            sourcePlayback={sourcePlayback}\r\n            backgroundConfig={backgroundConfig}\r\n            segmentationConfig={segmentationConfig}\r\n            postProcessingConfig={postProcessingConfig}\r\n            bodyPix={bodyPix}\r\n            tflite={tflite}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Client;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport { initArgs, ZoomMtg } from \"@zoomus/websdk\";\r\nimport CaptureList from \"./page/CaptureList\";\r\nimport ButtonGroup from \"./components/ButtonGroup\";\r\nimport RecordAndPrescription from \"./page/RecordAndPrescription\";\r\nimport CheckTool from \"./page/CheckTool\";\r\nimport DiagnosticHistory from \"./page/DiagnosticHistory\";\r\nimport { PhotoType, FileType } from \"./types/PrescriptionType\";\r\nimport Client from \"./page/Client\";\r\n\r\nZoomMtg.setZoomJSLib(\"https://source.zoom.us/2.4.5/lib\", \"/av\");\r\n\r\nZoomMtg.preLoadWasm();\r\nZoomMtg.prepareWebSDK();\r\n// loads language files, also passes any error messages to the ui\r\nZoomMtg.i18n.load(\"ko-KO\");\r\nZoomMtg.i18n.reload(\"ko-KO\");\r\n//ZoomMtg.i18n.load(\"en-US\");\r\n//ZoomMtg.i18n.reload(\"en-US\");\r\n\r\nfunction App() {\r\n  const [url, setUrl] = useState(\r\n    \"https://zoom.us/j/91314635094?pwd=bm5icWNwSTBjdEh6d05ZaUFkbVBJUT09\"\r\n  );\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [isEnter, setIsEnter] = useState(false);\r\n  const [isHost, setIsHost] = useState(\"1\");\r\n\r\n  const [memo, setMemo] = useState<string>(\"\");\r\n  const [photoList, setPhotoList] = useState<PhotoType[]>([]);\r\n  const [checkedPhotoList, setCheckedPhotoList] = useState<PhotoType[]>([]);\r\n  const [uploadedPhotoList, setUploadedPhotoList] = useState<PhotoType[]>([]);\r\n  const [videoList, setVideoList] = useState<PhotoType[]>([]);\r\n\r\n  const [isModal, setIsModal] = useState(false);\r\n  const [src, setSrc] = useState(\"\");\r\n\r\n  const [currentPage, setCurrentPage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (document) {\r\n      const url = document.location.href.split(\"?url=\")[1];\r\n      if (url) setUrl(url);\r\n    }\r\n  }, []);\r\n\r\n  const sdkKey = \"xPN1ctkMLTAqaWGsE7FDSonJSEOO8B0XtQf8\";\r\n  const meetingNumber = url.slice(\r\n    url.indexOf(\"/j/\") + 3,\r\n    url.indexOf(\"pwd=\") - 1\r\n  );\r\n  const leaveUrl = \"http://localhost:3000\";\r\n  const userEmail = \"\";\r\n  const passWord = url.slice(url.indexOf(\"pwd=\") + 4, url.length);\r\n  const sdkKeySecret = \"zaPNq6sYv9uKIUUI5wVCHGnqwnC8nG8F2p4U\";\r\n  const registrantToken = \"\";\r\n\r\n  const generateSDKSignature = () =>\r\n    ZoomMtg.generateSDKSignature({\r\n      sdkKey: sdkKey,\r\n      sdkSecret: sdkKeySecret,\r\n      meetingNumber: meetingNumber,\r\n      role: \"0\", //잠시 0으로 뒀고, 풀림에서 정보 받으면 isHost로 바꾸자.\r\n      success: () => console.info(\"generateSDKSignature success\"),\r\n      error: (e: any) => console.info(\"generateSDKSignature fail\", e),\r\n    });\r\n  function getSignature(\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) {\r\n    event.preventDefault();\r\n\r\n    const root = document.getElementById(\"zmmtg-root\");\r\n\r\n    if (!root) return;\r\n    root.style.display = \"block\"; //줌 강제로 보이게 하는건인듯\r\n\r\n    const setting: typeof initArgs = {\r\n      leaveUrl: leaveUrl,\r\n      showMeetingHeader: true,\r\n      disableInvite: false,\r\n      disableCallOut: false,\r\n      disableRecord: false,\r\n      disableJoinAudio: false,\r\n      audioPanelAlwaysOpen: true,\r\n      showPureSharingContent: true,\r\n      isSupportAV: true,\r\n      isSupportChat: true,\r\n      isSupportQA: true,\r\n      isSupportCC: true,\r\n      isSupportPolling: true,\r\n      isSupportBreakout: true,\r\n      screenShare: true,\r\n      //rwcBackup: string,\r\n      videoDrag: true,\r\n      //sharingMode: string,\r\n      videoHeader: false,\r\n      isLockBottom: false,\r\n      isSupportNonverbal: true,\r\n      isShowJoiningErrorDialog: true,\r\n\r\n      inviteUrlFormat:\r\n        \"https://localhost:3000/?url=https://us04web.zoom.us/j/{0}?pwd={1}\",\r\n\r\n      meetingInfo: [\"participant\"],\r\n      disableVoIP: false,\r\n      disableReport: false,\r\n      disablePreview: false,\r\n      disableCORP: false,\r\n      onRetryCallback: true,\r\n      enableHD: true,\r\n      helper: \"what\",\r\n    };\r\n    const join_data = {\r\n      signature: generateSDKSignature(),\r\n      meetingNumber: meetingNumber,\r\n      userName: userName,\r\n      sdkKey: sdkKey,\r\n      userEmail: userEmail,\r\n      passWord: passWord,\r\n      tk: registrantToken,\r\n      success: (success: any) => {\r\n        console.log(\"성공\");\r\n        setIsEnter(true);\r\n      },\r\n\r\n      error: (error: any) => console.log(error),\r\n    };\r\n    ZoomMtg.init({\r\n      ...setting,\r\n      success: (success: any) => ZoomMtg.join(join_data),\r\n      error: (error: any) => console.log(error),\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <h1>Zoom Meeting SDK Sample React</h1>\r\n        <br />\r\n        <p>주소 창에 zoom url을 입력하면 해당 ZOOM으로 접근이 가능합니다.</p>\r\n        <br />\r\n        <p>예: http://localhost:3000/?url={url}</p>\r\n        <br />\r\n\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"트레이너\"\r\n            name=\"drone\"\r\n            value=\"1\"\r\n            checked={isHost === \"1\"}\r\n            onClick={() => setIsHost(\"1\")}\r\n          />\r\n          <label htmlFor=\"트레이너\" style={{ padding: \"0 0 0 4px\" }}>\r\n            트레이너(호스트)\r\n          </label>\r\n          <div style={{ marginRight: 8 }} />\r\n          <input\r\n            type=\"radio\"\r\n            id=\"참가자\"\r\n            name=\"drone\"\r\n            value=\"0\"\r\n            checked={isHost === \"0\"}\r\n            onClick={() => setIsHost(\"0\")}\r\n          />\r\n          <label htmlFor=\"참가자\" style={{ padding: \"0 0 0 4px\" }}>\r\n            참가자\r\n          </label>\r\n        </div>\r\n        <h2>참가자 이름</h2>\r\n        <input\r\n          value={userName}\r\n          onChange={(e: any) => setUserName(e.target.value)}\r\n        />\r\n        <br />\r\n        <button onClick={getSignature}>Join Meeting</button>\r\n      </main>\r\n      {isHost === \"0\" && isEnter && (\r\n        <div\r\n          style={{\r\n            width: \"400px\",\r\n            position: \"absolute\",\r\n            top: 0,\r\n            zIndex: 1,\r\n            right: 0,\r\n          }}\r\n        >\r\n          <Client\r\n            meetingNumber={meetingNumber}\r\n            isHost={isHost}\r\n            userName={userName}\r\n          />\r\n        </div>\r\n      )}\r\n      {isHost === \"1\" && isEnter && (\r\n        <>\r\n          <div\r\n            id=\"pullim-page\"\r\n            style={{\r\n              width: \"400px\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              zIndex: 1,\r\n              right: 0,\r\n              display: \"none\",\r\n              height: \"100vh\",\r\n              backgroundColor: \"rgba(255,255,255)\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              borderRadius: \"1% 0 0 1%\",\r\n              overflow: \"hidden\",\r\n              // wordWrap: \"break-word\",\r\n            }}\r\n          >\r\n            {currentPage === \"CaptureList\" && (\r\n              <CaptureList\r\n                photoList={photoList}\r\n                setPhotoList={setPhotoList}\r\n                setIsModal={setIsModal}\r\n                setSrc={setSrc}\r\n              />\r\n            )}\r\n            {currentPage === \"RecordAndPrescription\" && (\r\n              <RecordAndPrescription\r\n                photoList={photoList}\r\n                uploadedPhotoList={uploadedPhotoList}\r\n                setUploadedPhotoList={setUploadedPhotoList}\r\n                videoList={videoList}\r\n                setVideoList={setVideoList}\r\n                memo={memo}\r\n                setMemo={setMemo}\r\n              />\r\n            )}\r\n            {currentPage === \"CheckTool\" && (\r\n              <CheckTool\r\n                checkedPhotoList={checkedPhotoList}\r\n                setCheckedPhotoList={setCheckedPhotoList}\r\n                isHost={isHost}\r\n                userName={userName}\r\n                meetingNumber={meetingNumber}\r\n              />\r\n            )}\r\n            {currentPage === \"DiagnosticHistory\" && <DiagnosticHistory />}\r\n          </div>\r\n          <ButtonGroup\r\n            setPhotoList={setPhotoList}\r\n            photoList={photoList}\r\n            setCurrentPage={setCurrentPage}\r\n          />\r\n          {isModal && (\r\n            <div\r\n              style={{\r\n                zIndex: 1,\r\n                position: \"absolute\",\r\n                width: \"1100px\",\r\n                top: \"10%\",\r\n                left: \"10%\",\r\n                border: \"2.5px solid orange\",\r\n              }}\r\n            >\r\n              <img\r\n                style={{ width: \"100%\" }}\r\n                onClick={() => {\r\n                  setIsModal(false);\r\n                }}\r\n                src={src}\r\n                alt=\"큰 이미지\"\r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}